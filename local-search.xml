<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>react 虚拟列表之 FixedSizeList 封装</title>
    <link href="/blog/2023/01/06/012FixedSizeList%E5%B0%81%E8%A3%85/"/>
    <url>/blog/2023/01/06/012FixedSizeList%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="1-长列表渲染"><a href="#1-长列表渲染" class="headerlink" title="1. 长列表渲染"></a>1. 长列表渲染</h2><ul><li>如果有海量数据在浏览器里一次性渲染会有以下问题<ul><li>计算时间过长，用户需要长时间等待，体验差</li><li>CPU 处理时间过长，滑动过程中可能卡顿</li><li>GPU 负载过高，渲染不过来会出现闪动</li><li>内存占用过多，严重会引起浏览器卡死和崩溃</li></ul></li><li>优化方法<ul><li>下拉底部加载更多实现懒加载，此方法随着内容越来越多，会引起大量的重排和重绘，依赖可能会卡顿</li><li>虚拟列表 其实我们的屏幕可视区域是有限的，能看到的数据也是有限的,所以可以在用户滚动时，只渲染可视区域内的内容即可,不可见区域用空白占位填充, 这样的话页面中的 DOM 元素少，CPU、GPU 和内存负载小</li></ul></li></ul><h2 id="2-长列表组件"><a href="#2-长列表组件" class="headerlink" title="2.长列表组件"></a>2.长列表组件</h2><ul><li><a href="https://github.com/bvaughn/react-virtualized">react-virtualized</a></li><li><a href="https://github.com/bvaughn/react-window">react-window</a></li><li><a href="https://react-window.vercel.app/#/examples/list/fixed-size">react-window.vercel.app</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i react-<span class="hljs-variable language_">window</span> --save<br></code></pre></td></tr></table></figure><h2 id="3-固定高度列表实战"><a href="#3-固定高度列表实战" class="headerlink" title="3. 固定高度列表实战"></a>3. 固定高度列表实战</h2><h3 id="3-1-src-index-js"><a href="#3-1-src-index-js" class="headerlink" title="3.1 src\index.js"></a>3.1 src\index.js</h3><blockquote><p>src\index.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom/client&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">FixedSizeList</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./fixed-size-list&quot;</span><br><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>))<br>root.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FixedSizeList</span> /&gt;</span></span>)<br></code></pre></td></tr></table></figure><h3 id="3-2-fixed-size-list-js"><a href="#3-2-fixed-size-list-js" class="headerlink" title="3.2 fixed-size-list.js"></a>3.2 fixed-size-list.js</h3><blockquote><p>src\fixed-size-list.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">FixedSizeList</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-window&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./fixed-size-list.css&quot;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Row</span> = (<span class="hljs-params">&#123; index, style &#125;</span>) =&gt; (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;index</span> % <span class="hljs-attr">2</span> ? &quot;<span class="hljs-attr">ListItemOdd</span>&quot; <span class="hljs-attr">:</span> &quot;<span class="hljs-attr">ListItemEven</span>&quot;&#125; <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">    Row&#123;index&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FixedSizeList</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;List&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">height</span>=<span class="hljs-string">&#123;200&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">width</span>=<span class="hljs-string">&#123;200&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">itemSize</span>=<span class="hljs-string">&#123;50&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">itemCount</span>=<span class="hljs-string">&#123;1000&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      &#123;Row&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">FixedSizeList</span>&gt;</span></span><br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><h3 id="3-3-fixed-size-list-css"><a href="#3-3-fixed-size-list-css" class="headerlink" title="3.3 fixed-size-list.css"></a>3.3 fixed-size-list.css</h3><blockquote><p>src\fixed-size-list.css</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.List</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid gray;<br>&#125;<br><br><span class="hljs-selector-class">.ListItemEven</span>,<br><span class="hljs-selector-class">.ListItemOdd</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>&#125;<br><span class="hljs-selector-class">.ListItemOdd</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: lightcoral;<br>&#125;<br><span class="hljs-selector-class">.ListItemEven</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: lightblue;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-FixedSizeList实现"><a href="#4-FixedSizeList实现" class="headerlink" title="4.FixedSizeList实现"></a>4.<code>FixedSizeList</code>实现</h2><h3 id="4-1-全部渲染"><a href="#4-1-全部渲染" class="headerlink" title="4. 1 全部渲染"></a>4. 1 全部渲染</h3><blockquote><p>首先实现传入的数据页面全部渲染</p></blockquote><p><img src="https://static.zhufengpeixun.com/reactwindowfixed_1651225094542.jpg" alt="原理"></p><h4 id="4-1-1fixed-size-list-js"><a href="#4-1-1fixed-size-list-js" class="headerlink" title="4.1 .1fixed-size-list.js"></a>4.1 .1fixed-size-list.js</h4><p>src\fixed-size-list.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">FixedSizeList</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./react-window&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./fixed-size-list.css&quot;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Row</span> = (<span class="hljs-params">&#123; index, style &#125;</span>) =&gt; (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;index</span> % <span class="hljs-attr">2</span> ? &quot;<span class="hljs-attr">ListItemOdd</span>&quot; <span class="hljs-attr">:</span> &quot;<span class="hljs-attr">ListItemEven</span>&quot;&#125; <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">    Row&#123;index&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">FixedSizeList</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;List&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">height</span>=<span class="hljs-string">&#123;200&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">width</span>=<span class="hljs-string">&#123;200&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">itemSize</span>=<span class="hljs-string">&#123;50&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">itemCount</span>=<span class="hljs-string">&#123;1000&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">      &#123;Row&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">FixedSizeList</span>&gt;</span></span><br>  )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><h4 id="4-1-2-react-window-index-js"><a href="#4-1-2-react-window-index-js" class="headerlink" title="4.1.2 react-window\index.js"></a>4.1.2 react-window\index.js</h4><p>src\react-window\index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> &#123; <span class="hljs-keyword">default</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">FixedSizeList</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./FixedSizeList&quot;</span><br></code></pre></td></tr></table></figure><h4 id="4-1-3-FixedSizeList-js"><a href="#4-1-3-FixedSizeList-js" class="headerlink" title="4.1.3 FixedSizeList.js"></a>4.1.3 FixedSizeList.js</h4><p>src\react-window\FixedSizeList.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> createListComponent <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./createListComponent&quot;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">FixedSizeList</span> = <span class="hljs-title function_">createListComponent</span>(&#123;<br>  <span class="hljs-attr">getItemSize</span>: <span class="hljs-function">(<span class="hljs-params">&#123; itemSize &#125;</span>) =&gt;</span> itemSize, <span class="hljs-comment">//每个条目的高度</span><br>  <span class="hljs-attr">getEstimatedTotalSize</span>: <span class="hljs-function">(<span class="hljs-params">&#123; itemSize, itemCount &#125;</span>) =&gt;</span> itemSize * itemCount, <span class="hljs-comment">//获取预计的总高度</span><br>  <span class="hljs-attr">getItemOffset</span>: <span class="hljs-function">(<span class="hljs-params">&#123; itemSize &#125;, index</span>) =&gt;</span> itemSize * index, <span class="hljs-comment">//获取每个条目的偏移量</span><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">FixedSizeList</span><br></code></pre></td></tr></table></figure><h4 id="4-1-4-createListComponent-js"><a href="#4-1-4-createListComponent-js" class="headerlink" title="4.1.4 createListComponent.js"></a>4.1.4 createListComponent.js</h4><p>src\react-window\createListComponent.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createListComponent</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">  getEstimatedTotalSize, //获取预计的总高度</span><br><span class="hljs-params">  getItemSize, //每个条目的高度</span><br><span class="hljs-params">  getItemOffset, //获取每个条目的偏移量</span><br><span class="hljs-params">&#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">extends</span> <span class="hljs-title class_">React</span>.<span class="hljs-property">Component</span> &#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">const</span> &#123; width, height, itemCount, <span class="hljs-attr">children</span>: <span class="hljs-title class_">ComponentType</span> &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br>      <span class="hljs-keyword">const</span> containerStyle = &#123;<br>        <span class="hljs-attr">position</span>: <span class="hljs-string">&quot;relative&quot;</span>,<br>        width,<br>        height,<br>        <span class="hljs-attr">overflow</span>: <span class="hljs-string">&quot;auto&quot;</span>,<br>        <span class="hljs-attr">willChange</span>: <span class="hljs-string">&quot;transform&quot;</span>,<br>      &#125;<br>      <span class="hljs-keyword">const</span> contentStyle = &#123;<br>        <span class="hljs-attr">height</span>: <span class="hljs-title function_">getEstimatedTotalSize</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>),<br>        <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;100%&quot;</span>,<br>      &#125;<br>      <span class="hljs-keyword">const</span> items = []<br>      <span class="hljs-keyword">if</span> (itemCount &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; itemCount; index++) &#123;<br>          items.<span class="hljs-title function_">push</span>(<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ComponentType</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">index</span>=<span class="hljs-string">&#123;index&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">              <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;this._getItemStyle(index)&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            /&gt;</span></span><br>          )<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;containerStyle&#125;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;contentStyle&#125;</span>&gt;</span>&#123;items&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>      )<br>    &#125;<br>    <span class="hljs-comment">//获取每个item的样式</span><br>    _getItemStyle = <span class="hljs-function">(<span class="hljs-params">index</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> style = &#123;<br>        <span class="hljs-attr">position</span>: <span class="hljs-string">&quot;absolute&quot;</span>,<br>        <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;100%&quot;</span>,<br>        <span class="hljs-attr">height</span>: <span class="hljs-title function_">getItemSize</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>),<br>        <span class="hljs-attr">top</span>: <span class="hljs-title function_">getItemOffset</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>, index),<br>      &#125;<br>      <span class="hljs-keyword">return</span> style<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-渲染首屏"><a href="#4-2-渲染首屏" class="headerlink" title="4.2. 渲染首屏"></a>4.2. 渲染首屏</h2><h3 id="4-2-1-FixedSizeList-js"><a href="#4-2-1-FixedSizeList-js" class="headerlink" title="4.2.1 FixedSizeList.js"></a>4.2.1 FixedSizeList.js</h3><p>src\react-window\FixedSizeList.js</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs diff">import createListComponent from &#x27;./createListComponent&#x27;;<br>const FixedSizeList = createListComponent(&#123;<br>    getItemSize: (&#123; itemSize &#125;) =&gt; itemSize,//每个条目的高度<br>    getEstimatedTotalSize: (&#123; itemSize, itemCount &#125;) =&gt; itemSize * itemCount, //获取预计的总高度<br>    getItemOffset: (&#123; itemSize &#125;, index) =&gt; itemSize * index, //获取每个条目的偏移量<br><span class="hljs-addition">+   getStartIndexForOffset: (&#123; itemSize &#125;, offset) =&gt; Math.floor(offset / itemSize),//获取起始索引</span><br><span class="hljs-addition">+   getStopIndexForStartIndex: (&#123; height, itemSize &#125;, startIndex) =&gt; &#123;//获取结束索引</span><br><span class="hljs-addition">+       const numVisibleItems = Math.ceil(height / itemSize);</span><br><span class="hljs-addition">+       return startIndex + numVisibleItems - 1;</span><br>    &#125;<br>&#125;);<br>export default FixedSizeList;<br></code></pre></td></tr></table></figure><h3 id="4-2-2-createListComponent-js"><a href="#4-2-2-createListComponent-js" class="headerlink" title="4.2.2 createListComponent.js"></a>4.2.2 createListComponent.js</h3><p>src\react-window\createListComponent.js</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs diff">import React from &#x27;react&#x27;;<br>export default function createListComponent(&#123;<br>    getEstimatedTotalSize,//获取预计的总高度<br>    getItemSize,//每个条目的高度<br>    getItemOffset,//获取每个条目的偏移量<br><span class="hljs-addition">+   getStartIndexForOffset,</span><br><span class="hljs-addition">+   getStopIndexForStartIndex</span><br>&#125;) &#123;<br>    return class extends React.Component &#123;<br><span class="hljs-addition">+       state = &#123; scrollOffset: 0 &#125;</span><br>        render() &#123;<br>            const &#123; width, height, itemCount, children: ComponentType &#125; = this.props;<br>            const containerStyle = &#123; position: &#x27;relative&#x27;, width, height, overflow: &#x27;auto&#x27;, willChange: &#x27;transform&#x27; &#125;;<br>            const contentStyle = &#123; height: getEstimatedTotalSize(this.props), width: &#x27;100%&#x27; &#125;;<br>            const items = [];<br>            if (itemCount &gt; 0) &#123;<br><span class="hljs-addition">+               const [startIndex, stopIndex] = this._getRangeToRender();</span><br><span class="hljs-addition">+               for (let index = startIndex; index &lt;= stopIndex; index++) &#123;</span><br>                    items.push(<br>                        &lt;ComponentType key=&#123;index&#125; index=&#123;index&#125; style=&#123;this._getItemStyle(index)&#125; /&gt;<br>                    );<br>                &#125;<br>            &#125;<br>            return (<br>                &lt;div style=&#123;containerStyle&#125;&gt;<br>                    &lt;div style=&#123;contentStyle&#125;&gt;<br>                        &#123;items&#125;<br>                    &lt;/div&gt;<br>                &lt;/div&gt;<br>            )<br>        &#125;<br>        _getItemStyle = (index) =&gt; &#123;<br>            const style = &#123;<br>                position: &#x27;absolute&#x27;,<br>                width: &#x27;100%&#x27;,<br>                height: getItemSize(this.props),<br>                top: getItemOffset(this.props, index)<br>            &#125;;<br>            return style;<br>        &#125;<br><span class="hljs-addition">+       _getRangeToRender = () =&gt; &#123;</span><br><span class="hljs-addition">+           const &#123; scrollOffset &#125; = this.state;</span><br><span class="hljs-addition">+           const startIndex = getStartIndexForOffset(this.props, scrollOffset);</span><br><span class="hljs-addition">+           const stopIndex = getStopIndexForStartIndex(this.props, startIndex);</span><br><span class="hljs-addition">+           return [startIndex, stopIndex];</span><br><span class="hljs-addition">+       &#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-3-监听滚动"><a href="#4-3-监听滚动" class="headerlink" title="4.3. 监听滚动"></a>4.3. 监听滚动</h2><h3 id="4-3-1-createListComponent-js"><a href="#4-3-1-createListComponent-js" class="headerlink" title="4.3.1 createListComponent.js"></a>4.3.1 createListComponent.js</h3><p>src\react-window\createListComponent.js</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs diff">import React from &#x27;react&#x27;;<br>export default function createListComponent(&#123;<br>    getEstimatedTotalSize,//获取预计的总高度<br>    getItemSize,//每个条目的高度<br>    getItemOffset,//获取每个条目的偏移量<br>    getStartIndexForOffset,<br>    getStopIndexForStartIndex<br>&#125;) &#123;<br>    return class extends React.Component &#123;<br>        state = &#123; scrollOffset: 0 &#125;<br>        render() &#123;<br>            const &#123; width, height, itemCount, children: ComponentType &#125; = this.props;<br>            const containerStyle = &#123; position: &#x27;relative&#x27;, width, height, overflow: &#x27;auto&#x27;, willChange: &#x27;transform&#x27; &#125;;<br>            const contentStyle = &#123; height: getEstimatedTotalSize(this.props), width: &#x27;100%&#x27; &#125;;<br>            const items = [];<br>            if (itemCount &gt; 0) &#123;<br>                const [startIndex, stopIndex] = this._getRangeToRender();<br>                for (let index = startIndex; index &lt;= stopIndex; index++) &#123;<br>                    items.push(<br>                        &lt;ComponentType key=&#123;index&#125; index=&#123;index&#125; style=&#123;this._getItemStyle(index)&#125; /&gt;<br>                    );<br>                &#125;<br>            &#125;<br>            return (<br><span class="hljs-addition">+               &lt;div style=&#123;containerStyle&#125; onScroll=&#123;this.onScroll&#125;&gt;</span><br>                    &lt;div style=&#123;contentStyle&#125;&gt;<br>                        &#123;items&#125;<br>                    &lt;/div&gt;<br>                &lt;/div&gt;<br>            )<br>        &#125;<br><span class="hljs-addition">+       onScroll = event =&gt; &#123;</span><br><span class="hljs-addition">+           const &#123; scrollTop &#125; = event.currentTarget;</span><br><span class="hljs-addition">+           this.setState(&#123; scrollOffset: scrollTop &#125;);</span><br><span class="hljs-addition">+       &#125;</span><br>        _getItemStyle = (index) =&gt; &#123;<br>            const style = &#123;<br>                position: &#x27;absolute&#x27;,<br>                width: &#x27;100%&#x27;,<br>                height: getItemSize(this.props),<br>                top: getItemOffset(this.props, index)<br>            &#125;;<br>            return style;<br>        &#125;<br>        _getRangeToRender = () =&gt; &#123;<br>            const &#123; scrollOffset &#125; = this.state;<br>            const startIndex = getStartIndexForOffset(this.props, scrollOffset);<br>            const stopIndex = getStopIndexForStartIndex(this.props, startIndex);<br>            return [startIndex, stopIndex]<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-4-overscan-增加缓存区域"><a href="#4-4-overscan-增加缓存区域" class="headerlink" title="4.4. overscan (增加缓存区域)"></a>4.4. overscan (增加缓存区域)</h2><ul><li>过扫描实质上是切断图片的边缘，以确保所有重要的东西显示在屏幕上 <img src="https://static.zhufengpeixun.com/Overscan_1651392914894.png" alt="img"></li></ul><h3 id="4-4-1-createListComponent-js"><a href="#4-4-1-createListComponent-js" class="headerlink" title="4.4.1 createListComponent.js"></a>4.4.1 createListComponent.js</h3><p>src\react-window\createListComponent.js</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs diff">import React from &#x27;react&#x27;;<br>export default function createListComponent(&#123;<br>    getEstimatedTotalSize,//获取预计的总高度<br>    getItemSize,//每个条目的高度<br>    getItemOffset,//获取每个条目的偏移量<br>    getStartIndexForOffset,<br>    getStopIndexForStartIndex<br>&#125;) &#123;<br>    return class extends React.Component &#123;<br><span class="hljs-addition">+       static defaultProps = &#123;</span><br><span class="hljs-addition">+           overscanCount: 2</span><br><span class="hljs-addition">+       &#125;</span><br>        state = &#123; scrollOffset: 0 &#125;<br>        render() &#123;<br>            const &#123; width, height, itemCount, children: ComponentType &#125; = this.props;<br>            const containerStyle = &#123; position: &#x27;relative&#x27;, width, height, overflow: &#x27;auto&#x27;, willChange: &#x27;transform&#x27; &#125;;<br>            const contentStyle = &#123; height: getEstimatedTotalSize(this.props), width: &#x27;100%&#x27; &#125;;<br>            const items = [];<br>            if (itemCount &gt; 0) &#123;<br>                const [startIndex, stopIndex] = this._getRangeToRender();<br>                for (let index = startIndex; index &lt;= stopIndex; index++) &#123;<br>                    items.push(<br>                        &lt;ComponentType key=&#123;index&#125; index=&#123;index&#125; style=&#123;this._getItemStyle(index)&#125; /&gt;<br>                    );<br>                &#125;<br>            &#125;<br>            return (<br>                &lt;div style=&#123;containerStyle&#125; onScroll=&#123;this.onScroll&#125;&gt;<br>                    &lt;div style=&#123;contentStyle&#125;&gt;<br>                        &#123;items&#125;<br>                    &lt;/div&gt;<br>                &lt;/div&gt;<br>            )<br>        &#125;<br>        onScroll = event =&gt; &#123;<br>            const &#123; scrollTop &#125; = event.currentTarget;<br>            this.setState(&#123; scrollOffset: scrollTop &#125;);<br>        &#125;<br>        _getItemStyle = (index) =&gt; &#123;<br>            const style = &#123;<br>                position: &#x27;absolute&#x27;,<br>                width: &#x27;100%&#x27;,<br>                height: getItemSize(this.props),<br>                top: getItemOffset(this.props, index)<br>            &#125;;<br>            return style;<br>        &#125;<br>        _getRangeToRender = () =&gt; &#123;<br>            const &#123; scrollOffset &#125; = this.state;<br><span class="hljs-addition">+           const &#123; itemCount, overscanCount &#125; = this.props;</span><br>            const startIndex = getStartIndexForOffset(this.props, scrollOffset);<br>            const stopIndex = getStopIndexForStartIndex(this.props, startIndex);<br>            return [<br><span class="hljs-addition">+               Math.max(0, startIndex - overscanCount),</span><br><span class="hljs-addition">+               Math.max(0, Math.min(itemCount - 1, stopIndex + overscanCount)),</span><br>                startIndex, stopIndex]<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react全家桶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react组件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器缓存机制介绍与缓存策略剖析</title>
    <link href="/blog/2023/01/06/011%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <url>/blog/2023/01/06/011%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>缓存可以减少网络  <code>IO</code>  消耗，提高访问速度。浏览器缓存是一种操作简单、效果显著的前端性能优化手段。对于这个操作的必要性，Chrome 官方给出的解释似乎更有说服力一些：</p></blockquote><blockquote><p>通过网络获取内容既速度缓慢又开销巨大。较大的响应需要在客户端与服务器之间进行多次往返通信，这会延迟浏览器获得和处理内容的时间，还会增加访问者的流量费用。因此，缓存并重复利用之前获取的资源的能力成为性能优化的一个关键方面。</p></blockquote><ul><li>很多时候，大家倾向于将浏览器缓存简单地理解为“HTTP 缓存”。但事实上，浏览器缓存机制有四个方面，它们按照获取资源时请求的优先级依次排列如下：</li></ul><ol><li><code>Memory Cache</code></li><li><code>Service Worker Cache</code></li><li><code>HTTP Cache</code></li><li><code>Push Cache</code></li></ol><blockquote><p>大家对  <code>HTTP Cache</code>（即  <code>Cache-Control</code>、<code>expires</code>  等字段控制的缓存）应该比较熟悉，如果对其它几种缓存可能还没什么概念，我们可以先来看一张线上网站的  <code>Network</code>  面板截图：</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ddfa3219d3f3410fabad2cc0d765dcdf~tplv-k3u1fbpfcp-zoom-1.image"><img src="/blog/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22">​ 编辑</p><p>我们给  <code>size</code>  这一栏一个特写：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/127ce325ad70464abf9b713d4812fb29~tplv-k3u1fbpfcp-zoom-1.image"><img src="/blog/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22">​ 编辑</p><blockquote><p>大家注意一下非数字——即形如“（<code>from xxx</code>）”这样的描述——对应的资源，这些资源就是我们通过缓存获取到的。其中，“from memory cache”对标到  <code>Memory Cache</code>  类型，“<code>from ServiceWorker</code>”对标到  <code>Service Worker Cache</code>  类型。至于  <code>Push Cache</code>，这个比较特殊，是  <code>HTTP2</code>  的新特性。</p></blockquote><p>本节将会针对这四个方面各个击破。考虑到 HTTP 缓存是最主要、最具有代表性的缓存策略，也是每一位前端工程师都应该深刻理解掌握的性能优化知识点，我们下面优先针对 HTTP 缓存机制进行剖析。</p><h1 id="HTTP-缓存机制探秘"><a href="#HTTP-缓存机制探秘" class="headerlink" title="HTTP 缓存机制探秘"></a>HTTP 缓存机制探秘</h1><hr><p>HTTP 缓存是我们日常开发中最为熟悉的一种缓存机制。它又分为<strong>强缓存</strong>和<strong>协商缓存</strong>。优先级较高的是强缓存，在命中强缓存失败的情况下，才会走协商缓存。</p><h2 id="1-强缓存的特征"><a href="#1-强缓存的特征" class="headerlink" title="1. 强缓存的特征"></a><strong>1. 强缓存的特征</strong></h2><blockquote><p>强缓存是利用  <code>http</code>  头中的  <code>Expires</code>  和  <code>Cache-Control</code>  两个字段来控制的。强缓存中，当请求再次发出时，浏览器会根据其中的  <code>expires</code>  和  <code>cache-control</code>  判断目标资源是否“命中”强缓存，若命中则直接从缓存中获取资源，<strong>不会再与服务端发生通信。</strong></p></blockquote><p>命中强缓存的情况下，返回的  <code>HTTP</code>  状态码为  <code>200</code> （如下图）。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5fb3ff675124489484fe40580bf90a4d~tplv-k3u1fbpfcp-zoom-1.image"><img src="/blog/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22">​ 编辑</p><h2 id="2-强缓存的实现：从-expires-到-cache-control"><a href="#2-强缓存的实现：从-expires-到-cache-control" class="headerlink" title="2. 强缓存的实现：从 expires 到 cache-control"></a><strong>2. 强缓存的实现：从 expires 到 cache-control</strong></h2><ul><li>实现强缓存，过去我们一直用  <code>expires</code>。</li><li>当服务器返回响应时，在  <code>Response Headers</code>  中将过期时间写入  <code>expires</code>  字段。像这样：</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6157f49ca998455fbfbada92149b0f08~tplv-k3u1fbpfcp-zoom-1.image"><img src="/blog/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22">​ 编辑</p><p>我们给  <code>expires</code>  一个特写：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">expires</span>: Wed, <span class="hljs-number">11</span> Sep <span class="hljs-number">2019</span> <span class="hljs-number">16</span>:<span class="hljs-number">12</span>:<span class="hljs-number">18</span> GMT<br></code></pre></td></tr></table></figure><p><img src="/blog/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><ul><li>可以看到，<code>expires</code>  是一个时间戳，接下来如果我们试图再次向服务器请求资源，浏览器就会先对比本地时间和  <code>expires</code>  的时间戳，如果本地时间小于  <code>expires</code>  设定的过期时间，那么就直接去缓存中取这个资源。</li><li>从这样的描述中大家也不难猜测，<code>expires</code>  是有问题的，它最大的问题在于对“本地时间”的依赖。如果服务端和客户端的时间设置可能不同，或者我直接手动去把客户端的时间改掉，那么  <code>expires</code>  将无法达到我们的预期。</li><li>考虑到  <code>expires</code>  的局限性，<code>HTTP1.1</code>  新增了  <code>Cache-Control</code>  字段来完成  <code>expires</code>  的任务。<br>expires 能做的事情，Cache-Control 都能做；<code>expires</code>  完成不了的事情，<code>Cache-Control</code>  也能做。因此，<code>Cache-Control</code>  可以视作是  <code>expires</code>  的<strong>完全替代方案</strong>。在当下的前端实践里，我们继续使用  <code>expires</code>  的唯一目的就是<strong>向下兼容</strong>。</li></ul><blockquote><p>现在我们给  <code>Cache-Control</code>  字段一个特写：</p></blockquote><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">cache</span><span class="hljs-params">-control</span>: <span class="hljs-keyword">max</span><span class="hljs-params">-age</span>=<span class="hljs-number">31536000</span><br></code></pre></td></tr></table></figure><p><img src="/blog/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><blockquote><p>如大家所见，在  <code>Cache-Control</code>  中，我们通过  <code>max-age</code>  来控制资源的有效期。<code>max-age</code>  不是一个时间戳，而是一个时间长度。在本例中，<code>max-age</code>  是 31536000 秒，它意味着该资源在 31536000 秒以内都是有效的，完美地规避了时间戳带来的潜在问题。</p></blockquote><p><strong>Cache-Control 相对于 expires 更加准确，它的优先级也更高。当 Cache-Control 与 expires 同时出现时，我们以 Cache-Control 为准。</strong></p><h2 id="3-Cache-Control-应用分析"><a href="#3-Cache-Control-应用分析" class="headerlink" title="3. Cache-Control 应用分析"></a><strong>3. Cache-Control 应用分析</strong></h2><blockquote><p><code>Cache-Control</code>  的神通，可不止于这一个小小的  <code>max-age</code>。如下的用法也非常常见：</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cache-control: <span class="hljs-attribute">max-age</span>=3600, <span class="hljs-attribute">s-maxage</span>=31536000<br></code></pre></td></tr></table></figure><p><img src="/blog/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><p><strong>s-maxage 优先级高于 max-age，两者同时出现时，优先考虑 s-maxage。如果 s-maxage 未过期，则向代理服务器请求其缓存内容。</strong></p><blockquote><p>这个  <code>s-maxage</code>  不像  <code>max-age</code>  一样为大家所熟知。的确，在项目不是特别大的场景下，<code>max-age</code>  足够用了。但在依赖各种<strong>代理</strong>的大型架构中，我们不得不考虑<strong>代理服务器</strong>的缓存问题。<code>s-maxage</code>  就是用于表示  <code>cache</code>  服务器上（比如  <code>cache CDN</code>）的缓存的有效时间的，并只对  <code>public</code>  缓存有效。</p></blockquote><ul><li>此处应注意这样一个细节：<code>s-maxage</code>仅在代理服务器中生效，客户端中我们只考虑<code>max-age</code></li><li>那么什么是  <code>public</code>  缓存呢？说到这里，<code>Cache-Control</code>  中有一些适合放在一起理解的知识点，我们集中梳理一下：</li></ul><p><strong>3.1 public 与 private</strong></p><ul><li><code>public</code>  与  <code>private</code>  是针对资源是否能够被代理服务缓存而存在的一组对立概念。</li><li>如果我们为资源设置了  <code>public</code>，那么它既可以被浏览器缓存，也可以被代理服务器缓存；如果我们设置了  <code>private</code>，则该资源只能被浏览器缓存。<code>private</code>  为<strong>默认值</strong>。但多数情况下，<code>public</code>  并不需要我们手动设置，比如有很多线上网站的  <code>cache-control</code>  是这样的：</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1852b17ee6ad45d2a36f41256079e56e~tplv-k3u1fbpfcp-zoom-1.image"><img src="/blog/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22">​ 编辑</p><blockquote><p>设置了  <code>s-maxage</code>，没设置  <code>public</code>，那么  <code>CDN</code>  还可以缓存这个资源吗？答案是肯定的。因为明确的缓存信息（例如“<code>max-age</code>”）已表示响应是可以缓存的。</p></blockquote><p><strong>3.2 no-store 与 no-cache</strong></p><ul><li><code>no-cache</code>  绕开了浏览器：我们为资源设置了  <code>no-cache</code>  后，每一次发起请求都不会再去询问浏览器的缓存情况，而是直接向服务端去确认该资源是否过期（即走我们下文即将讲解的协商缓存的路线）。</li><li><code>no-store</code>  比较绝情，顾名思义就是不使用任何缓存策略。在  <code>no-cache</code>  的基础上，它连服务端的缓存确认也绕开了，只允许你直接向服务端发送请求、并下载完整的响应。</li></ul><h2 id="4-协商缓存：浏览器与服务器合作之下的缓存策略"><a href="#4-协商缓存：浏览器与服务器合作之下的缓存策略" class="headerlink" title="4. 协商缓存：浏览器与服务器合作之下的缓存策略"></a><strong>4. 协商缓存：浏览器与服务器合作之下的缓存策略</strong></h2><ul><li>协商缓存依赖于服务端与浏览器之间的通信。</li></ul><blockquote><p>协商缓存机制下，浏览器需要向服务器去询问缓存的相关信息，进而判断是重新发起请求、下载完整的响应，还是从本地获取缓存的资源。</p></blockquote><p>如果服务端提示缓存资源未改动（<code>Not Modified</code>），资源会被<strong>重定向</strong>到浏览器缓存，<strong>这种情况下网络请求对应的状态码是 304</strong>（如下图）。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1386624ba5364d63b29931988a9e8eb5~tplv-k3u1fbpfcp-zoom-1.image"><img src="/blog/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22">​ 编辑</p><h2 id="5-协商缓存的实现：从-Last-Modified-到-Etag"><a href="#5-协商缓存的实现：从-Last-Modified-到-Etag" class="headerlink" title="5. 协商缓存的实现：从 Last-Modified 到 Etag"></a><strong>5. 协商缓存的实现：从 Last-Modified 到 Etag</strong></h2><blockquote><p><code>Last-Modified</code>  是一个时间戳，如果我们启用了协商缓存，它会在首次请求时随着  <code>Response Headers</code>  返回：</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Last</span>-Modified: Fri, <span class="hljs-number">27</span> Oct <span class="hljs-number">2017</span> <span class="hljs-number">06</span>:<span class="hljs-number">35</span>:<span class="hljs-number">57</span> GMT<br></code></pre></td></tr></table></figure><p><img src="/blog/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><blockquote><p>随后我们每次请求时，会带上一个叫  <code>If-Modified-Since</code>  的时间戳字段，它的值正是上一次  <code>response</code>  返回给它的  <code>last-modified</code>  值：</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">If</span>-Modified-Since: Fri, <span class="hljs-number">27</span> Oct <span class="hljs-number">2017</span> <span class="hljs-number">06</span>:<span class="hljs-number">35</span>:<span class="hljs-number">57</span> GMT<br></code></pre></td></tr></table></figure><p><img src="/blog/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><blockquote><p>服务器接收到这个时间戳后，会比对该时间戳和资源在服务器上的最后修改时间是否一致，从而判断资源是否发生了变化。如果发生了变化，就会返回一个完整的响应内容，并在  <code>Response Headers</code>  中添加新的  <code>Last-Modified</code>值；否则，返回如上图的  <code>304</code>  响应，<code>Response Headers</code>  不会再添加  <code>Last-Modified</code>  字段。</p></blockquote><p><strong>使用 Last-Modified 存在一些弊端，这其中最常见的就是这样两个场景：</strong></p><ul><li>我们编辑了文件，但文件的内容没有改变。服务端并不清楚我们是否真正改变了文件，它仍然通过最后编辑时间进行判断。因此这个资源在再次被请求时，会被当做新资源，进而引发一次完整的响应——不该重新请求的时候，也会重新请求。</li><li>当我们修改文件的速度过快时（比如花了  <code>100ms</code>  完成了改动），由于  <code>If-Modified-Since</code>  只能检查到以秒为最小计量单位的时间差，所以它是感知不到这个改动的——该重新请求的时候，反而没有重新请求了。</li></ul><blockquote><p>这两个场景其实指向了同一个  <code>bug</code>——服务器并没有正确感知文件的变化。为了解决这样的问题，<code>Etag</code>  作为  <code>Last-Modified</code>  的补充出现了。</p></blockquote><ul><li><code>Etag</code>  是由服务器为每个资源生成的唯一的<strong>标识字符串</strong>，这个标识字符串是基于文件内容编码的，只要文件内容不同，它们对应的  <code>Etag</code>  就是不同的，反之亦然。因此  <code>Etag</code>  能够精准地感知文件的变化。</li><li><code>Etag</code>  和  <code>Last-Modified</code>  类似，当首次请求时，我们会在响应头里获取到一个最初的标识符字符串，举个 🌰，它可以是这样的：</li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">ETag:</span> W/<span class="hljs-string">&quot;2a3b-1602480f459&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/blog/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><p>那么下一次请求时，请求头里就会带上一个值相同的、名为  <code>if-None-Match</code>  的字符串供服务端比对了：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">If</span><span class="hljs-operator">-</span><span class="hljs-built_in">None</span><span class="hljs-operator">-</span><span class="hljs-variable">Match</span><span class="hljs-operator">:</span> <span class="hljs-variable">W</span><span class="hljs-operator">/</span><span class="hljs-string">&quot;2a3b-1602480f459&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/blog/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><blockquote><p><code>Etag</code>  的生成过程需要服务器额外付出开销，会影响服务端的性能，这是它的弊端。因此启用  <code>Etag</code>  需要我们审时度势。正如我们刚刚所提到的——<code>Etag</code>  并不能替代  <code>Last-Modified</code>，它只能作为  <code>Last-Modified</code>  的补充和强化存在。 <strong>Etag 在感知文件变化上比 Last-Modified 更加准确，优先级也更高。当 Etag 和 Last-Modified 同时存在时，以 Etag 为准。</strong></p></blockquote><h1 id="HTTP-缓存决策指南"><a href="#HTTP-缓存决策指南" class="headerlink" title="HTTP 缓存决策指南"></a>HTTP 缓存决策指南</h1><blockquote><p>行文至此，当代 HTTP 缓存技术用到的知识点，我们已经从头到尾挖掘了一遍了。那么在面对一个具体的缓存需求时，我们到底该怎么决策呢？</p></blockquote><p>走到决策建议这一步，我本来想给大家重新画一个流程图。但是画来画去终究不如 Chrome 官方给出的这张清晰、权威：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f5262ee53ab4ae1a2ac27e56ce5bf9c~tplv-k3u1fbpfcp-zoom-1.image"><img src="/blog/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22">​ 编辑</p><p><strong>我们现在一起解读一下这张流程图：</strong></p><ul><li>当我们的资源内容不可复用时，直接为  <code>Cache-Control</code>  设置  <code>no-store</code>，拒绝一切形式的缓存；否则考虑是否每次都需要向服务器进行缓存有效确认，如果需要，那么设  <code>Cache-Control</code>  的值为  <code>no-cache</code>；否则考虑该资源是否可以被代理服务器缓存，根据其结果决定是设置为  <code>private</code>  还是  <code>public</code>；然后考虑该资源的过期时间，设置对应的  <code>max-age</code>  和  <code>s-maxage</code>  值；最后，配置协商缓存需要用到的  <code>Etag</code>、<code>Last-Modified</code>  等参数。</li><li>个人非常推崇这张流程图给出的决策建议，也强烈推荐大家在理解以上知识点的基础上，将这张图保存下来、在日常开发中用用看，它的可行度非常高。</li></ul><p>OK，走到这里，本节最大的一座山已经被大家翻过去了。接下来的内容会相对比较轻松，大家放松心情，我们继续前行！</p><h2 id="MemoryCache"><a href="#MemoryCache" class="headerlink" title="MemoryCache"></a>MemoryCache</h2><ul><li><code>MemoryCache</code>，是指存在内存中的缓存。从优先级上来说，它是浏览器最先尝试去命中的一种缓存。从效率上来说，它是响应速度最快的一种缓存。</li><li>内存缓存是快的，也是“短命”的。它和渲染进程“生死相依”，当进程结束后，也就是 tab 关闭以后，内存里的数据也将不复存在。</li></ul><p>那么哪些文件会被放入内存呢？</p><ul><li>事实上，这个划分规则，一直以来是没有定论的。不过想想也可以理解，内存是有限的，很多时候需要先考虑即时呈现的内存余量，再根据具体的情况决定分配给内存和磁盘的资源量的比重——资源存放的位置具有一定的随机性。</li><li>虽然划分规则没有定论，但根据日常开发中观察的结果，包括我们开篇给大家展示的  <code>Network</code>截图，我们至少可以总结出这样的规律：资源存不存内存，浏览器秉承的是“节约原则”。我们发现，<code>Base64</code>  格式的图片，几乎永远可以被塞进  <code>memory cache</code>，这可以视作浏览器为节省渲染开销的“自保行为”；此外，体积不大的  <code>JS</code>、<code>CSS</code>  文件，也有较大地被写入内存的几率——相比之下，较大的  <code>JS</code>、<code>CSS</code>  文件就没有这个待遇了，内存资源是有限的，它们往往被直接甩进磁盘。</li></ul><h2 id="Service-Worker-Cache"><a href="#Service-Worker-Cache" class="headerlink" title="Service Worker Cache"></a>Service Worker Cache</h2><blockquote><p><code>Service Worker</code>  是一种独立于主线程之外的 Javascript 线程。它脱离于浏览器窗体，因此无法直接访问 DOM。这样独立的个性使得  <code>Service Worker</code>  的“个人行为”无法干扰页面的性能，这个“幕后工作者”可以帮我们实现离线缓存、消息推送和网络代理等功能。我们借助  <code>Service worker</code>  实现的离线缓存就称为  <code>Service Worker Cache</code>。</p></blockquote><ul><li><code>Service Worker</code>  的生命周期包括  <code>install</code>、<code>active</code>、<code>working</code>  三个阶段。一旦  <code>Service Worker</code>  被  <code>install</code>，它将始终存在，只会在  <code>active</code>  与  <code>working</code>  之间切换，除非我们主动终止它。这是它可以用来实现离线存储的重要先决条件。</li><li>下面我们就通过实战的方式，一起见识一下  <code>Service Worker</code>  如何为我们实现离线缓存（注意看注释）： 我们首先在入口文件中插入这样一段 JS 代码，用以判断和引入  <code>Service Worker</code>：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">navigator</span>.<span class="hljs-property">serviceWorker</span><br>  .<span class="hljs-title function_">register</span>(<span class="hljs-string">&quot;/test.js&quot;</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;注册成功&quot;</span>)<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;注册失败&quot;</span>)<br>  &#125;)<br></code></pre></td></tr></table></figure><p><img src="/blog/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><blockquote><p>在  <code>test.js</code>  中，我们进行缓存的处理。假设我们需要缓存的文件分别是  <code>test.html</code>,<code>test.css</code>  和  <code>test.js</code>：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Service Worker会监听 install事件，我们在其对应的回调里可以实现初始化的逻辑</span><br>self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;install&quot;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  event.<span class="hljs-title function_">waitUntil</span>(<br>    <span class="hljs-comment">// 考虑到缓存也需要更新，open内传入的参数为缓存的版本号</span><br>    caches.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;test-v1&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">cache</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> cache.<span class="hljs-title function_">addAll</span>([<br>        <span class="hljs-comment">// 此处传入指定的需缓存的文件名</span><br>        <span class="hljs-string">&quot;/test.html&quot;</span>,<br>        <span class="hljs-string">&quot;/test.css&quot;</span>,<br>        <span class="hljs-string">&quot;/test.js&quot;</span>,<br>      ])<br>    &#125;)<br>  )<br>&#125;)<br><br><span class="hljs-comment">// Service Worker会监听所有的网络请求，网络请求的产生触发的是fetch事件，我们可以在其对应的监听函数中实现对请求的拦截，进而判断是否有对应到该请求的缓存，实现从Service Worker中取到缓存的目的</span><br>self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;fetch&quot;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>  event.<span class="hljs-title function_">respondWith</span>(<br>    <span class="hljs-comment">// 尝试匹配该请求对应的缓存值</span><br>    caches.<span class="hljs-title function_">match</span>(event.<span class="hljs-property">request</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 如果匹配到了，调用Server Worker缓存</span><br>      <span class="hljs-keyword">if</span> (res) &#123;<br>        <span class="hljs-keyword">return</span> res<br>      &#125;<br>      <span class="hljs-comment">// 如果没匹配到，向服务端发起这个资源请求</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">fetch</span>(event.<span class="hljs-property">request</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (!response || response.<span class="hljs-property">status</span> !== <span class="hljs-number">200</span>) &#123;<br>          <span class="hljs-keyword">return</span> response<br>        &#125;<br>        <span class="hljs-comment">// 请求成功的话，将请求缓存起来。</span><br>        caches.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;test-v1&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">cache</span>) &#123;<br>          cache.<span class="hljs-title function_">put</span>(event.<span class="hljs-property">request</span>, response)<br>        &#125;)<br>        <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">clone</span>()<br>      &#125;)<br>    &#125;)<br>  )<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="/blog/%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><p><strong>PS</strong>：大家注意  <code>Server Worker</code>  对协议是有要求的，必须以  <code>https</code>  协议为前提。</p><h2 id="Push-Cache"><a href="#Push-Cache" class="headerlink" title="Push Cache"></a>Push Cache</h2><blockquote><p>预告：本小节定位为基础科普向，对 Push Cache 有深入挖掘兴趣的同学，强烈推荐拓展阅读 Chrome 工程师 Jake Archibald 的这篇  <a href="https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/" title="HTTP/2 push is tougher than I thought (opens new window)">HTTP&#x2F;2 push is tougher than I thought (opens new window)</a>。</p></blockquote><ul><li><code>Push Cache</code>  是指  <code>HTTP2</code>  在  <code>server push</code>  阶段存在的缓存。这块的知识比较新，应用也还处于萌芽阶段，我找了好几个网站也没找到一个合适的案例来给大家做具体的介绍。但应用范围有限不代表不重要——<code>HTTP2</code>  是趋势、是未来。在它还未被推而广之的此时此刻，我仍希望大家能对  <code>Push Cache</code>  的关键特性有所了解：</li></ul><!----><ul><li><code>Push Cache</code>  是缓存的最后一道防线。浏览器只有在  <code>Memory Cache</code>、<code>HTTP Cache</code>  和  <code>Service Worker Cache</code>  均未命中的情况下才会去询问  <code>Push Cache</code>。</li><li><code>Push Cache</code>  是一种存在于会话阶段的缓存，当  <code>session</code>  终止时，缓存也随之释放。</li><li>不同的页面只要共享了同一个  <code>HTTP2</code>  连接，那么它们就可以共享同一个  <code>Push Cache</code>。</li></ul><p>更多的特性和应用，期待大家可以在日后的开发过程中去挖掘和实践。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><blockquote><p>小建议！很多人在学习缓存这块知识的时候可能多少会有这样的感觉：对浏览器缓存，只能描述个大致，却说不上深层原理；好不容易记住了每个字段怎么用，过几天又给忘了。这是因为缓存部分的知识，具有“细碎、迭代快”的特点。对于这样的知识，我们应该尝试先划分出层次和重点，归纳出完整的体系，然后针对每个知识点去各个击破。</p></blockquote><p>​</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>浏览器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安全问题：CSRF 和 XSS</title>
    <link href="/blog/2023/01/06/010%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    <url>/blog/2023/01/06/010%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><ul><li><code>CSRF</code>：基本概念、攻击方式、防御措施</li><li><code>XSS</code>：基本概念、攻击方式、防御措施</li></ul><blockquote><p>有人问：<code>SQL</code>注入算吗？答案：这个其实跟前端的关系不是很大。</p></blockquote><h2 id="2-CSRF"><a href="#2-CSRF" class="headerlink" title="2 CSRF"></a>2 CSRF</h2><h3 id="2-1-CSRF-的基本概念、缩写、全称"><a href="#2-1-CSRF-的基本概念、缩写、全称" class="headerlink" title="2.1 CSRF 的基本概念、缩写、全称"></a>2.1 CSRF 的基本概念、缩写、全称</h3><blockquote><p><code>CSRF</code>（<code>Cross-site request forgery</code>）：<strong>跨站请求伪造</strong>。</p></blockquote><h3 id="2-2-CSRF-的攻击原理"><a href="#2-2-CSRF-的攻击原理" class="headerlink" title="2.2 CSRF 的攻击原理"></a>2.2 CSRF 的攻击原理</h3><p><img src="https://s.poetries.work/gitee/2020/07/17.png" alt="img"></p><blockquote><p>用户是网站 A 的注册用户，且登录进去，于是网站 A 就给用户下发<code>cookie</code>。</p></blockquote><p>要完成一次<code>CSRF</code>攻击，受害者必须满足<strong>两个必要的条件</strong>：</p><ol><li>登录受信任网站<code>A</code>，并在本地生成<code>Cookie</code>。（如果用户没有登录网站<code>A</code>，那么网站<code>B</code>在诱导的时候，请求网站<code>A</code>的<code>api</code>接口时，会提示你登录）</li><li>在不登出<code>A</code>的情况下，访问危险网站<code>B</code>（其实是利用了网站<code>A</code>的漏洞）。</li></ol><blockquote><p><code>cookie</code>保证了用户可以处于登录状态，但网站<code>B</code>其实拿不到 <code>cookie</code>。</p></blockquote><p><strong>案例</strong>（钓鱼网站取钱）</p><h3 id="2-3-CSRF-如何防御"><a href="#2-3-CSRF-如何防御" class="headerlink" title="2.3 CSRF 如何防御"></a>2.3 CSRF 如何防御</h3><h4 id="方法一、Token-验证：（用的最多）"><a href="#方法一、Token-验证：（用的最多）" class="headerlink" title="方法一、Token 验证：（用的最多）"></a><strong>方法一、Token 验证：</strong>（用的最多）</h4><ol><li>服务器发送给客户端一个<code>token</code>；</li><li>客户端提交的表单中带着这个<code>token</code>。</li><li>如果这个 <code>token</code> 不合法，那么服务器拒绝这个请求。</li></ol><h4 id="方法二：隐藏令牌："><a href="#方法二：隐藏令牌：" class="headerlink" title="方法二：隐藏令牌："></a><strong>方法二：隐藏令牌：</strong></h4><ul><li>把 <code>token</code> 隐藏在 <code>http</code> 的 <code>head</code>头中。</li></ul><blockquote><p>方法二和方法一有点像，本质上没有太大区别，只是使用方式上有区别。</p></blockquote><h4 id="方法三、Referer-验证："><a href="#方法三、Referer-验证：" class="headerlink" title="方法三、Referer 验证："></a><strong>方法三、Referer 验证：</strong></h4><blockquote><p><code>Referer</code> 指的是页面请求来源。意思是，<strong>只接受本站的请求，服务器才做响应</strong>；如果不是，就拦截。（可以仿造）</p></blockquote><h4 id="方法四、添加验证码（体验不好）"><a href="#方法四、添加验证码（体验不好）" class="headerlink" title="方法四、添加验证码（体验不好）"></a><strong>方法四、添加验证码（体验不好）</strong></h4><blockquote><p>服务端生成图片发送给客户端</p></blockquote><h2 id="3-XSS"><a href="#3-XSS" class="headerlink" title="3 XSS"></a>3 XSS</h2><h3 id="3-1-XSS-的基本概念"><a href="#3-1-XSS-的基本概念" class="headerlink" title="3.1 XSS 的基本概念"></a>3.1 XSS 的基本概念</h3><blockquote><p><code>XSS（Cross Site Scripting）</code>：<strong>跨域脚本攻击</strong>。</p></blockquote><h3 id="3-2-XSS-的攻击原理"><a href="#3-2-XSS-的攻击原理" class="headerlink" title="3.2 XSS 的攻击原理"></a>3.2 XSS 的攻击原理</h3><blockquote><p><code>XSS</code>攻击的核心原理是：不需要你做任何的登录认证，它会通过合法的操作（比如在<code>url</code>中输入、在评论框中输入），向你的页面注入脚本（可能是<code>js</code>、<code>hmtl</code>代码块等）。</p></blockquote><blockquote><p>最后导致的结果可能是：</p></blockquote><ul><li>盗用<code>Cookie</code></li><li>破坏页面的正常结构，插入广告等恶意内容</li><li><code>D-doss</code>攻击（消耗服务器带宽）</li></ul><h3 id="3-3-XSS-的攻击方式和防范措施"><a href="#3-3-XSS-的攻击方式和防范措施" class="headerlink" title="3.3 XSS 的攻击方式和防范措施"></a>3.3 XSS 的攻击方式和防范措施</h3><h4 id="1-反射型（基于后端）"><a href="#1-反射型（基于后端）" class="headerlink" title="1. 反射型（基于后端）"></a>1. 反射型（基于后端）</h4><blockquote><p>发出请求时，<code>XSS</code>代码出现在<code>url</code>中，作为输入提交到服务器端，服务器端解析后响应，<code>XSS</code>代码随响应内容一起传回给浏览器，最后浏览器解析执行<code>XSS</code>代码。这个过程像一次反射，所以叫反射型<code>XSS</code></p></blockquote><p>​ <strong>案例 用户 type 参数传递什么返回什么</strong></p><ul><li><p><code>?type=&lt;script&gt;alart(1)&lt;/script&gt;</code></p></li><li><p>chrome 发现路径存在异常 会有 xss 屏蔽功能</p></li><li><p>诱导用户点击（一次性）拿到用户 cookier</p></li></ul><p><strong>解决方式</strong></p><ul><li>服务端查询参数 加上<code>encodeURLComponent(req.query.type)</code>转码</li></ul><h4 id="2、DOM-Based-不基于后端"><a href="#2、DOM-Based-不基于后端" class="headerlink" title="2、DOM-Based(不基于后端)"></a>2、DOM-Based(不基于后端)</h4><blockquote><p>修改属性 插入内容 document.write…</p></blockquote><p>​ <strong>案例 输入图片地址 然后出现图片</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#box&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">`&lt;img src = &#x27;<span class="hljs-subst">$&#123;$(<span class="hljs-string">&#x27;#url&#x27;</span>).val()&#125;</span>&#x27;&gt;`</span>)<br><br>&lt;img src =<span class="hljs-string">&quot;xxx&quot;</span> onerror=<span class="hljs-string">&quot;alert(1)&quot;</span> id=<span class="hljs-string">&quot;&quot;</span> &gt;<br><br>用户输入 xxx<span class="hljs-string">&quot; onerror=&quot;</span><span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)<span class="hljs-string">&quot; id=&quot;</span> 页面就会一直弹框<br><br>解决方法<br>$(<span class="hljs-string">&quot;#box&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">`&lt;img src = &#x27;<span class="hljs-subst">$&#123;encodeURL( $(<span class="hljs-string">&#x27;#url&#x27;</span>).val())&#125;</span>&#x27;&gt;`</span>)<br></code></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><ul><li>客户端对内容进行<code>encodeURL（）</code></li></ul><h4 id="3、存储型（恶意脚本存储到服务器）"><a href="#3、存储型（恶意脚本存储到服务器）" class="headerlink" title="3、存储型（恶意脚本存储到服务器）"></a>3、存储型（恶意脚本存储到服务器）</h4><blockquote><p>存储型<code>XSS</code>和反射型<code>XSS</code>的差别在于，提交的代码会存储在服务器端（数据库、内存、文件系统等），下次请求时目标页面时不用再提交 XSS 代码。</p></blockquote><p>​ **案例 ： 评论 功能 **</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">用户评论的的时候添加恶意脚本   存储到服务器<br>然后其他人获取评论列表 就会被脚本攻击  （范围广）<br></code></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><ul><li><p>客户端传递给服务器时候，需要校验先过滤一下</p></li><li><p>服务器再做一次过滤</p></li><li><p>直接在输出的时候过滤</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">encodeHtml</span>(<span class="hljs-params">str</span>) &#123;<br>  <span class="hljs-keyword">return</span> str<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">&quot;&amp;amp;&quot;</span>)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&quot;/g</span>, <span class="hljs-string">&quot;&amp;quot;&quot;</span>)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&#x27;/g</span>, <span class="hljs-string">&quot;&amp;apos;&quot;</span>)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">&quot;&amp;amp;&quot;</span>)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&lt;/g</span>, <span class="hljs-string">&quot;&amp;lt;&quot;</span>)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&gt;/g</span>, <span class="hljs-string">&quot;&amp;gt;&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-4-XSS-的防范措施（encode-过滤）"><a href="#3-4-XSS-的防范措施（encode-过滤）" class="headerlink" title="3.4 XSS 的防范措施（encode + 过滤）"></a>3.4 XSS 的防范措施（encode + 过滤）</h3><p><strong>XSS 的防范措施主要有三个：</strong></p><h4 id="1-编码："><a href="#1-编码：" class="headerlink" title="1. 编码："></a><strong>1. 编码</strong>：</h4><blockquote><p>对用户输入的数据进行<code>HTML Entity</code>编码。</p></blockquote><blockquote><p><code>Encode</code>的作用是将<code>$var</code>等一些字符进行转化，使得浏览器在最终输出结果上是一样的。</p></blockquote><h4 id="2、过滤："><a href="#2、过滤：" class="headerlink" title="2、过滤："></a><strong>2、过滤：</strong></h4><ul><li>移除用户输入的和事件相关的属性。如<code>onerror</code>可以自动触发攻击，还有<code>onclick</code>等。（总而言是，过滤掉一些不安全的内容）</li><li>移除用户输入的<code>Style</code>节点、<code>Script</code>节点、<code>Iframe</code>节点。（尤其是<code>Script</code>节点，它可是支持跨域的呀，一定要移除）。</li></ul><h4 id="3、校正"><a href="#3、校正" class="headerlink" title="3、校正"></a><strong>3、校正</strong></h4><ul><li>避免直接对<code>HTML Entity</code>进行解码。</li><li>使用<code>DOM Parse</code>转换，校正不配对的<code>DOM</code>标签。</li></ul><blockquote><p>备注：我们应该去了解一下<code>DOM Parse</code>这个概念，它的作用是把文本解析成<code>DOM</code>结构。</p></blockquote><p>比较常用的做法是，通过第一步的编码转成文本，然后第三步转成<code>DOM</code>对象，然后经过第二步的过滤。</p><p><strong>还有一种简洁的答案：</strong></p><p>首先是<strong>encode，如果是富文本</strong>，就白名单。</p><h2 id="4-CSRF-和-XSS-的区别"><a href="#4-CSRF-和-XSS-的区别" class="headerlink" title="4 CSRF 和 XSS 的区别"></a>4 CSRF 和 XSS 的区别</h2><p><strong>区别一：</strong></p><ul><li><code>CSRF</code>：需要用户先登录网站<code>A</code>，获取 <code>cookie</code></li><li><code>XSS</code>：不需要登录。</li></ul><p><strong>区别二：（原理的区别）</strong></p><ul><li><code>CSRF</code>：是利用网站<code>A</code>本身的漏洞，去请求网站<code>A</code>的<code>api</code>。</li><li><code>XSS</code>：是向网站 <code>A</code> 注入 <code>JS</code>代码，然后执行 <code>JS</code> 里的代码，篡改网站<code>A</code>的内容。</li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>V8 内存管理（垃圾回收机制）</title>
    <link href="/blog/2023/01/04/009v8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <url>/blog/2023/01/04/009v8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>V8 也会申请内存，申请的内存又会分为<strong>堆内存和栈内存</strong></p></blockquote><h3 id="1-1-栈"><a href="#1-1-栈" class="headerlink" title="1.1 栈"></a>1.1 栈</h3><ul><li>栈用于存放 JS 中的<strong>基本类型和引用类型指针</strong></li><li>栈的<strong>空间是连续</strong>的，增加删除只需要移动指针，操作速度非常快</li><li>栈的<strong>空间是有限</strong>的，当栈满了，就会抛出一个错误</li><li>栈一般是在<strong>执行函数时创建</strong>的，在函数执行完毕后，栈就会被销毁</li></ul><h3 id="1-2-堆"><a href="#1-2-堆" class="headerlink" title="1.2 堆"></a>1.2 堆</h3><ul><li>堆主要用于存储 JS 中的<strong>引用类型</strong></li></ul><p><img src="https://static.zhufengpeixun.com/dui_de_nei_cun_fen_pei_1639157736483.jpg" alt="new_large_object_space"></p><h4 id="1-2-1-堆空间分类"><a href="#1-2-1-堆空间分类" class="headerlink" title="1.2.1 堆空间分类"></a>1.2.1 堆空间分类</h4><h5 id="1-2-1-1-新生代-new-space"><a href="#1-2-1-1-新生代-new-space" class="headerlink" title="1.2.1.1 新生代(new space)"></a>1.2.1.1 新生代(new space)</h5><ul><li>新生代内存用于存放一些<strong>生命周期比较短的对象数据</strong></li></ul><h5 id="1-2-1-2-老生代-old-space"><a href="#1-2-1-2-老生代-old-space" class="headerlink" title="1.2.1.2 老生代(old space)"></a>1.2.1.2 老生代(old space)</h5><ul><li>老生代内存用于存放一些<strong>生命周期比较长的对象数据</strong></li><li>当<code>new space</code>的对象进行<strong>两个周期的</strong>垃圾回收后，如果数据还存在<code>new space</code>中，则将他们存放到<code>old space</code>中</li><li>Old Space 使<strong>用标记清除</strong>和<strong>标记整理</strong>的方式进行垃圾回收</li></ul><h4 id="1-2-2-什么是垃圾"><a href="#1-2-2-什么是垃圾" class="headerlink" title="1.2.2 什么是垃圾"></a>1.2.2 什么是垃圾</h4><ul><li>在程序运行过程中肯定会用到一些数据，这些数据会放在堆栈中，但是在程序运行结束后，这些数据就不会再被使用了，那些不再使用的数据就是垃圾</li></ul><h4 id="1-2-3-新生代的垃圾回收"><a href="#1-2-3-新生代的垃圾回收" class="headerlink" title="1.2.3 新生代的垃圾回收"></a>1.2.3 新生代的垃圾回收</h4><ul><li>新生代内存有<strong>两个区域</strong>，分别是<strong>对象区域(from) 和 空闲区域(to)</strong></li><li>新生代内存使用<strong>Scavenger 算法</strong>来管理内存,垃圾回收的入口<ul><li><strong>广度优先遍历</strong> From-Space 中的对象，从根对象出发，广度优先遍历所有能到达的对象,把存活的对象复制到 To-Space</li><li>遍历完成后，<strong>清空</strong> From-Space</li><li>From-Space 和 To-Space <strong>角色互换</strong></li></ul></li><li>复制后的对象在 To-Space 中占用的<strong>内存空间是连续的</strong>，<strong>不会出现碎片问题</strong></li><li>这种垃圾回收方式<strong>快速</strong>而又<strong>高效</strong>，但是<strong>会造成空间浪费</strong>（有 To-Space 空闲区域）</li><li>新生代的 <strong>GC 比较频繁</strong></li><li><strong>新生代的对象转移到老生</strong>代称为<strong>晋升 Promote</strong>,判断晋升的情况有两种<ul><li>经过<strong>一次 GC</strong> 还存活的对象</li><li>对象复制到 To-Space 时，To-Space 的<strong>空间达到一定的限制</strong>（超过 25%）</li></ul></li></ul><h4 id="1-2-4-老生代的垃圾回收"><a href="#1-2-4-老生代的垃圾回收" class="headerlink" title="1.2.4 老生代的垃圾回收"></a>1.2.4 老生代的垃圾回收</h4><blockquote><p>V8 在老生代中的垃圾回收策略采用<strong>Mark-Sweep(标记清除)和 Mark-Compact(标记整理)相结合</strong></p></blockquote><h5 id="1-2-4-1-Mark-Sweep-标记清除"><a href="#1-2-4-1-Mark-Sweep-标记清除" class="headerlink" title="1.2.4.1 Mark-Sweep(标记清除)"></a>1.2.4.1 Mark-Sweep(标记清除)</h5><ul><li>标记清除分为<strong>标记和清除两个阶段</strong></li><li>在标记阶段需要遍历**(深度优先遍历**)堆中的所有对象，并<strong>标记</strong>那些<strong>活着的对象</strong>，然后进入清除阶段。在清除阶段总，只<strong>清除没有被标记的对象</strong></li><li>V8 采取的是<strong>黑色和白色来标记数据</strong>，垃圾收集之前，会把所有的数据设置为<strong>白色</strong>，用来标记所有的<strong>尚未标记的对象</strong>，然后会从 GC 根出发，以<strong>深度优先的方式把所有的能访问到的数据都标记为黑色</strong>，遍历结束后黑色的就是活的数据，白色的就是可以清理的垃圾数据</li><li>由于标记清除只清除死亡对象，而死亡对象在老生代中占用的比例很小，所以<strong>效率较高</strong></li><li>标记清除有一个<strong>问题</strong>就是进行一次标记清楚后<strong>，内存空间往往是不连续</strong>的，会出现很多的<strong>内存碎片</strong>。如果后续需要分配一个需要内存空间较多的对象时，如果所有的内存碎片都不够用，就会出现内存溢出的问题</li></ul><h5 id="1-2-4-2-Mark-Compact（标记整理）"><a href="#1-2-4-2-Mark-Compact（标记整理）" class="headerlink" title="1.2.4.2 Mark-Compact（标记整理）"></a>1.2.4.2 Mark-Compact（标记整理）</h5><ul><li>标记整理正是为了<strong>解决标记清除所带来的内存碎片的问题</strong></li><li>标记整理在标记清除的基础进行修改，将其的<strong>清除阶段变为紧缩极端</strong></li><li>在整理的过程中，将活着的对象向内存区的一段移动，移动完成后直接清理掉边界外的内存</li><li>紧缩过程涉及对象的移动，所以<strong>效率并不是太好，</strong>但是能保证不会生成内存碎片，<strong>一般 10 次标记清理会伴随一次标记整理</strong></li></ul><h4 id="1-2-5-优化"><a href="#1-2-5-优化" class="headerlink" title="1.2.5 优化"></a>1.2.5 优化</h4><ul><li>在执行垃圾回收算法期间，JS 脚本需要暂停，这种叫 Stop the world(全停顿)</li><li>如果回收时间过长，会引起卡顿</li><li>性能优化<ul><li>把大任务拆分小任务，分步执行，类似 fiber</li><li>将一些任务放在后台执行，不占用主线程</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">JavaScript</span>执行 垃圾标记、垃圾清理、垃圾整理 <span class="hljs-title class_">JavaScript</span>执行<br>--------------                          ----------------&gt;<br></code></pre></td></tr></table></figure><h5 id="1-2-5-1-Parallel-并行执行"><a href="#1-2-5-1-Parallel-并行执行" class="headerlink" title="1.2.5.1 Parallel(并行执行)"></a>1.2.5.1 Parallel(并行执行)</h5><ul><li><strong>新生代的垃圾回收</strong>采取并行策略提升垃圾回收速度，它会<strong>开启多个辅助线</strong>程来执行新生代的垃圾回收工作</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">         -------辅助线程-----&gt;<br>         -------辅助线程-----&gt;<br>         -------辅助线程-----&gt;<br>---------                    ---------------------------&gt;<br></code></pre></td></tr></table></figure><h5 id="1-2-5-2-增量标记"><a href="#1-2-5-2-增量标记" class="headerlink" title="1.2.5.2 增量标记"></a>1.2.5.2 增量标记</h5><ul><li>老生代因为对象又大又多，所以垃圾回收的时间更长，采用增量标记的方式进行优化</li><li>增量标记就是把标记<strong>工作分成多个阶段</strong>，每个阶段都只标记一部分对象，和主线程的执行穿插进行</li><li>为了支持增量标记，V8 必须可以支持垃圾回收的<strong>暂停和恢复</strong>，所以采用了<code>黑白灰</code>三色标记法<ul><li>黑色表示这个节点被 GC 根引用到了，而且该节点的子节点都已经标记完成了</li><li>灰色表示这个节点被 GC 根引用到了，但子节点还没被垃圾回收器标记处理，也表明目前正在处理这个节点</li><li>白色表示此节点还没未被垃圾回收器发现，如果在本轮遍历结束时还是白色，那么这块数据就会被收回</li></ul></li><li>引入了灰色标记后，就可以通过判断有没有灰色节点来判断标记是否完成了，如果有灰色节点，下次恢复的应该从灰色节点继续执行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">---------开始标记---增量标记---增量标记---清理---整理-----------------&gt;<br></code></pre></td></tr></table></figure><h5 id="1-2-5-3-Write-barrier-写屏障"><a href="#1-2-5-3-Write-barrier-写屏障" class="headerlink" title="1.2.5.3 Write-barrier(写屏障)"></a>1.2.5.3 Write-barrier(写屏障)</h5><ul><li>当黑色指向白色节点的时候，就会触发写屏障，这个写屏障会把白色节点设置为灰色</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">global</span>.<span class="hljs-property">a</span> = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;a&quot;</span> &#125;<br><span class="hljs-variable language_">global</span>.<span class="hljs-property">a</span>.<span class="hljs-property">b</span> = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;b1&quot;</span> &#125;<br><span class="hljs-comment">//执行标记工作</span><br><span class="hljs-variable language_">global</span>.<span class="hljs-property">a</span>.<span class="hljs-property">b</span> = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;b2&quot;</span> &#125;<br><span class="hljs-comment">//继续执行标记工作</span><br></code></pre></td></tr></table></figure><h5 id="1-2-5-4-Lazy-Sweeping-惰性清理"><a href="#1-2-5-4-Lazy-Sweeping-惰性清理" class="headerlink" title="1.2.5.4 Lazy Sweeping(惰性清理)"></a>1.2.5.4 Lazy Sweeping(惰性清理)</h5><ul><li>当增量标记完成后，如果内存够用，先不清理，等 JS 代码执行完慢慢清理</li></ul><h5 id="1-2-5-5-concurrent-并发回收"><a href="#1-2-5-5-concurrent-并发回收" class="headerlink" title="1.2.5.5 concurrent(并发回收)"></a>1.2.5.5 concurrent(并发回收)</h5><ul><li>其实增量标记和惰性清理并没有减少暂停的总时间</li><li>并发回收就是主线程在执行过程中，辅助线程可以在后台完成垃圾回收工作</li><li>标记操作全都由辅助线程完，清理操作由主线程和辅助线程配合完成</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">         ----辅助线程标记----&gt;      -----清理整理----&gt;<br>         ----辅助线程标记----&gt;      -----清理整理----&gt;<br>         ----辅助线程标记----&gt;      -----清理整理----&gt;<br>-----------------------------执行<span class="hljs-variable constant_">JS</span>&gt;-----清理整理---&gt;---------------------------&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>浏览器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS中的继承</title>
    <link href="/blog/2023/01/03/008JS%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
    <url>/blog/2023/01/03/008JS%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
    
    <content type="html"><![CDATA[<h3 id="一、原型链继承"><a href="#一、原型链继承" class="headerlink" title="一、原型链继承"></a>一、原型链继承</h3><p><strong>构造函数、原型和实例的关系：</strong> 每个构造函数都有一个原型对象，原型有一个属性指回构造函数，而实例有一个内部指针指向原型。</p><p><strong>原型链的基本构想：</strong> 如果原型是另一个类型的实例呢？那就意味着这个原型本身有一个内部指针指向另一个原型，相应地另一个原型也有一个指针指向另一个构造函数。这样就在实例和原型之间构造了一条原型链</p><p><strong>重点：</strong> 让新实例的原型等于父类的实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">property</span> = <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getSuperValue</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">property</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">subproperty</span> = <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-comment">// 继承 SuperType</span><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperType</span>()<br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getSubValue</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">subproperty</span><br>&#125;<br><span class="hljs-keyword">let</span> instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance.<span class="hljs-title function_">getSuperValue</span>()) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><strong>特点：</strong></p><ol><li>实例可继承的属性有：实例的构造函数的属性，父类构造函数属性，父类原型的属性。</li></ol><p><strong>缺点：</strong></p><ol><li>新实例无法向父类构造函数传参。</li><li>继承单一。(只能继承一个父类构造函数)</li><li>所有新实例都会共享父类实例的属性。（原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原性也会被修改！）</li><li>要想为子类原型新增属性和方法，必须要在<code>new SuperType()</code>这样的语句之后执行</li></ol><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>]<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-comment">// 继承 SuperType</span><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperType</span>()<br><span class="hljs-keyword">let</span> instance1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>()<br>instance1.<span class="hljs-property">colors</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;black&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance1.<span class="hljs-property">colors</span>) <span class="hljs-comment">// &quot;red,blue,green,black&quot;</span><br><span class="hljs-keyword">let</span> instance2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance2.<span class="hljs-property">colors</span>) <span class="hljs-comment">// &quot;red,blue,green,black&quot;</span><br></code></pre></td></tr></table></figure><h3 id="二、借用构造函数继承"><a href="#二、借用构造函数继承" class="headerlink" title="二、借用构造函数继承"></a>二、借用构造函数继承</h3><p><strong>重点：</strong> 用.call()和.apply()将父类构造函数引入子类函数（在子类函数中做了父类函数的自执行（复制））</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 继承 SuperType 并传参</span><br>  <span class="hljs-title class_">SuperType</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;Nicholas&quot;</span>)<br>  <span class="hljs-comment">// 实例属性</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = <span class="hljs-number">29</span><br>&#125;<br><span class="hljs-keyword">let</span> instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance.<span class="hljs-property">name</span>) <span class="hljs-comment">// &quot;Nicholas&quot;;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance.<span class="hljs-property">age</span>) <span class="hljs-comment">// 29</span><br></code></pre></td></tr></table></figure><p><strong>特点：</strong></p><ol><li>只继承了父类构造函数的属性，没有继承父类原型的属性。</li><li>解决了原型链继承缺点 1、2、3。</li><li>可以继承多个构造函数属性（call 多个）。</li><li>在子实例中可向父实例传参。</li><li>解决了引用值问题</li></ol><p><strong>缺点：</strong></p><ol><li>只能继承父类构造函数的属性。</li><li>无法实现构造函数的复用。</li><li>每个新实例都有父类构造函数的副本，臃肿。</li></ol><h3 id="三、组合继承（组合原型链继承和借用构造函数继承）（常用）"><a href="#三、组合继承（组合原型链继承和借用构造函数继承）（常用）" class="headerlink" title="三、组合继承（组合原型链继承和借用构造函数继承）（常用）"></a>三、组合继承（组合原型链继承和借用构造函数继承）（常用）</h3><p><strong>重点：</strong> 结合了两种模式的优点，<strong>传参和复用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>]<br>&#125;<br><span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params">name, age</span>) &#123;<br>  <span class="hljs-comment">// 继承属性</span><br>  <span class="hljs-title class_">SuperType</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name) <span class="hljs-comment">//// 第一次调用 SuperType()</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>&#125;<br><span class="hljs-comment">// 继承方法</span><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperType</span>() <span class="hljs-comment">// 第二次调用 SuperType()</span><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayAge</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>)<br>&#125;<br><span class="hljs-keyword">let</span> instance1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>(<span class="hljs-string">&quot;Nicholas&quot;</span>, <span class="hljs-number">29</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;instance1=&gt;&quot;</span>, instance1)<br>instance1.<span class="hljs-property">colors</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;black&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance1.<span class="hljs-property">colors</span>) <span class="hljs-comment">// &quot;red,blue,green,black&quot;</span><br>instance1.<span class="hljs-title function_">sayName</span>() <span class="hljs-comment">// &quot;Nicholas&quot;;</span><br>instance1.<span class="hljs-title function_">sayAge</span>() <span class="hljs-comment">// 29</span><br><span class="hljs-keyword">let</span> instance2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>(<span class="hljs-string">&quot;Greg&quot;</span>, <span class="hljs-number">27</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance2.<span class="hljs-property">colors</span>) <span class="hljs-comment">// &quot;red,blue,green&quot;</span><br>instance2.<span class="hljs-title function_">sayName</span>() <span class="hljs-comment">// &quot;Greg&quot;;</span><br>instance2.<span class="hljs-title function_">sayAge</span>() <span class="hljs-comment">// 27</span><br></code></pre></td></tr></table></figure><p><strong>特点：</strong></p><ol><li>可以继承父类原型上的属性，可以传参，可复用。</li><li>每个新实例引入的构造函数属性是私有的。</li></ol><p><strong>缺点：</strong> 组合继承其实也存在效率问题。最主要的效率问题就是 <strong>父类构造函数始终会被调用两次</strong> ：一次在是创建子类原型时调用，另一次是在子类构造函数中调用</p><h3 id="四、原型式继承"><a href="#四、原型式继承" class="headerlink" title="四、原型式继承"></a>四、原型式继承</h3><p><strong>重点：</strong> 用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象。object.create()就是这个原理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//核心代码</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">object</span>(<span class="hljs-params">o</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = o<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>()<br>&#125;<br><br><span class="hljs-keyword">let</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Nicholas&quot;</span>,<br>  <span class="hljs-attr">friends</span>: [<span class="hljs-string">&quot;Shelby&quot;</span>, <span class="hljs-string">&quot;Court&quot;</span>, <span class="hljs-string">&quot;Van&quot;</span>],<br>&#125;<br><span class="hljs-keyword">let</span> anotherPerson = <span class="hljs-title function_">object</span>(person)<br>anotherPerson.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;Greg&quot;</span><br>anotherPerson.<span class="hljs-property">friends</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;Rob&quot;</span>)<br><span class="hljs-keyword">let</span> yetAnotherPerson = <span class="hljs-title function_">object</span>(person)<br>yetAnotherPerson.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;Linda&quot;</span><br>yetAnotherPerson.<span class="hljs-property">friends</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;Barbie&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">friends</span>) <span class="hljs-comment">// &quot;Shelby,Court,Van,Rob,Barbie&quot;</span><br></code></pre></td></tr></table></figure><p><strong>特点：</strong> 类似于复制一个对象，用函数来包装。</p><p><strong>缺点：</strong></p><ol><li><p>所有实例都会继承原型上的属性。</p></li><li><p>无法实现复用。（新实例属性都是后面添加的）</p></li></ol><blockquote><p>原型式继承非常适合不需要单独创建构造函数，但仍然需要在对象间共享信息的场合。但要记住，属性中包含的引用值始终会在相关对象间共享，跟使用原型模式是一样的</p></blockquote><h3 id="五、寄生式继承"><a href="#五、寄生式继承" class="headerlink" title="五、寄生式继承"></a>五、寄生式继承</h3><p><strong>重点：</strong> 就是给原型式继承外面套了个壳子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">object</span>(<span class="hljs-params">o</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = o<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>()<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createAnother</span>(<span class="hljs-params">original</span>) &#123;<br>  <span class="hljs-keyword">let</span> clone = <span class="hljs-title function_">object</span>(original) <span class="hljs-comment">// 通过调用函数创建一个新对象</span><br>  clone.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 以某种方式增强这个对象</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hi&quot;</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> clone <span class="hljs-comment">// 返回这个对象</span><br>&#125;<br><br><span class="hljs-keyword">let</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Nicholas&quot;</span>,<br>  <span class="hljs-attr">friends</span>: [<span class="hljs-string">&quot;Shelby&quot;</span>, <span class="hljs-string">&quot;Court&quot;</span>, <span class="hljs-string">&quot;Van&quot;</span>],<br>&#125;<br><span class="hljs-keyword">let</span> anotherPerson = <span class="hljs-title function_">createAnother</span>(person)<br>anotherPerson.<span class="hljs-title function_">sayHi</span>() <span class="hljs-comment">// &quot;hi&quot;</span><br><span class="hljs-comment">//寄生式继承同样适合主要关注对象，而不在乎类型和构造函数的场景。object()函数不是寄生式继承所必需的，任何返回新对象的函数都可以在这里使用。</span><br><span class="hljs-comment">// 注意 通过寄生式继承给对象添加函数会导致函数难以重用，与构造函数模式类似。</span><br></code></pre></td></tr></table></figure><p><strong>优点：</strong> 没有创建自定义类型，因为只是套了个壳子返回对象（这个），这个函数顺理成章就成了创建的新对象。</p><p><strong>缺点：</strong> 没用到原型，无法复用。</p><h3 id="六、寄生组合式继承（常用）"><a href="#六、寄生组合式继承（常用）" class="headerlink" title="六、寄生组合式继承（常用）"></a>六、寄生组合式继承（常用）</h3><p><strong>重点：</strong> 通过<strong>借用构造函数继承属性</strong> ，但使用混合式原型链继承方法。基本思路是不通过调用父类构造函数给子类原型赋值，而是取得父类原型的一个副本。说到底就是使用寄生式继承来继承父类原型，然后将返回的新对象赋值给子类原型。</p><p><strong>寄生：</strong> 在函数内返回对象然后调用</p><p><strong>组合：</strong></p><ol><li>函数的原型等于另一个实例。</li><li>在函数中用 apply 或者 call 引入另一个构造函数，可传参</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">object</span>(<span class="hljs-params">o</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = o<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>()<br>&#125;<br><br><span class="hljs-comment">/*function inheritPrototype(subType, superType) &#123; </span><br><span class="hljs-comment"> let prototype = object(superType.prototype); // 创建对象</span><br><span class="hljs-comment"> prototype.constructor = subType; // 增强对象 </span><br><span class="hljs-comment"> subType.prototype = prototype; // 赋值对象</span><br><span class="hljs-comment">&#125;*/</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>]<br>&#125;<br><span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params">name, age</span>) &#123;<br>  <span class="hljs-title class_">SuperType</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>&#125;<br><span class="hljs-keyword">let</span> prototype = <span class="hljs-title function_">object</span>(superType.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) <span class="hljs-comment">// 创建对象</span><br>subType.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = prototype <span class="hljs-comment">// 赋值对象</span><br>prototype.<span class="hljs-property">constructor</span> = subType <span class="hljs-comment">// 修复实例</span><br><br><span class="hljs-comment">//inheritPrototype(SubType, SuperType);</span><br><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayAge</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>优先：</strong> 修复了组合继承的问题</p><p><strong>缺点：</strong> 实现麻烦</p>]]></content>
    
    
    <categories>
      
      <category>前端基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS高级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sentry监控</title>
    <link href="/blog/2022/11/16/007sentry/"/>
    <url>/blog/2022/11/16/007sentry/</url>
    
    <content type="html"><![CDATA[<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><ul><li><p><a href="https://github.com/zhilinYu/zhufeng-public/tree/master/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7monitor/monitor">https://github.com/zhilinYu/zhufeng-public/tree/master/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7monitor/monitor</a></p></li><li><p><a href="https://retechus.atlassian.net/browse/EW-1744">https://retechus.atlassian.net/browse/EW-1744</a></p></li><li><p><a href="https://juejin.cn/post/6856366626750038023">https://juejin.cn/post/6856366626750038023</a></p></li><li><p><a href="https://juejin.cn/post/6844903984457580551">https://juejin.cn/post/6844903984457580551</a></p></li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ul><li><p><a href="https://juejin.cn/post/6914530201430917128">https://juejin.cn/post/6914530201430917128</a></p></li><li><p><a href="https://juejin.cn/post/6844904088866390024?share_token=72af2173-7dc5-4301-b2a4-35818b82813b">https://juejin.cn/post/6844904088866390024?share_token=72af2173-7dc5-4301-b2a4-35818b82813b</a></p></li></ul><h2 id="上报-SourceMap-版本号"><a href="#上报-SourceMap-版本号" class="headerlink" title="上报 SourceMap 版本号"></a>上报 SourceMap 版本号</h2><ul><li><p><a href="https://juejin.cn/post/6954303116783124487?share_token=fdac6d5d-73fe-43be-aa02-2930cca74729">https://juejin.cn/post/6954303116783124487?share_token=fdac6d5d-73fe-43be-aa02-2930cca74729</a></p></li><li><p><a href="https://juejin.cn/post/7123518368631652382">https://juejin.cn/post/7123518368631652382</a></p></li></ul><h2 id="手动上报"><a href="#手动上报" class="headerlink" title="手动上报"></a>手动上报</h2><ul><li><a href="https://juejin.cn/post/6957475955858210823">https://juejin.cn/post/6957475955858210823</a></li></ul><h2 id="主动捕获错误"><a href="#主动捕获错误" class="headerlink" title="主动捕获错误"></a>主动捕获错误</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">axios<br>  .<span class="hljs-title function_">post</span>(url)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response)<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-title class_">Sentry</span>.<span class="hljs-title function_">captureException</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;something went wrong&quot;</span>), scope)<br>  &#125;)<br></code></pre></td></tr></table></figure><h2 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h2><ul><li><a href="https://juejin.cn/post/6919856296522989582">https://juejin.cn/post/6919856296522989582</a></li></ul><h2 id="微前端区分项目"><a href="#微前端区分项目" class="headerlink" title="微前端区分项目"></a>微前端区分项目</h2><ul><li><a href="https://juejin.cn/post/7139452175088320520">https://juejin.cn/post/7139452175088320520</a></li></ul><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><ul><li><p><a href="https://juejin.cn/post/7148364027817623589?share_token=387017f7-9c88-4765-b069-b5a6aff3c36d">https://juejin.cn/post/7148364027817623589?share_token=387017f7-9c88-4765-b069-b5a6aff3c36d</a></p></li><li><p><a href="https://juejin.cn/post/7151753139052347399?share_token=474df17d-1139-403e-b351-766e3ad65ab5">https://juejin.cn/post/7151753139052347399?share_token=474df17d-1139-403e-b351-766e3ad65ab5</a></p></li></ul><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><ul><li><a href="https://juejin.cn/post/7143142055294795807">https://juejin.cn/post/7143142055294795807</a></li></ul><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><ul><li><a href="https://github.com/getsentry/sentry-javascript">https://github.com/getsentry/sentry-javascript</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>性能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>性能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文化建设</title>
    <link href="/blog/2022/09/16/005%E6%96%87%E5%8C%96/"/>
    <url>/blog/2022/09/16/005%E6%96%87%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="公司文化："><a href="#公司文化：" class="headerlink" title="公司文化："></a>公司文化：</h3><ol><li>Open minded and cooperative - 开放合作，虚心自省</li><li>Simple and direct communication - 不甩锅，不抱怨</li><li>Always seek for truth - 基于事实，追求真理</li><li>Always keep learning, stay humble - 保持学习，保持敬畏</li><li>Mars view - Global team - 火星视角</li></ol><h3 id="团队文化"><a href="#团队文化" class="headerlink" title="团队文化"></a>团队文化</h3><ul><li>自驱协作；</li><li>学习进取；</li><li>积极主动；</li><li>承担责任；</li><li>成就他人；</li><li>往前一步，站在对方立场思考问题；</li><li>拥抱变化、勇于挑战、打破边界（能力、认知），有全局意识！</li></ul>]]></content>
    
    
    <categories>
      
      <category>文化建设</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文化建设</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>连续数组test1</title>
    <link href="/blog/2022/09/16/006%E8%BF%9E%E7%BB%AD%E6%95%B0%E7%BB%84/"/>
    <url>/blog/2022/09/16/006%E8%BF%9E%E7%BB%AD%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p>给定一个二进制数组 nums , 找到含有相同数量的 0 和 1 的最长连续子数组，并返回该子数组的长度。</p><p>示例 1:</p><p>输入: nums &#x3D; [0,1]</p><p>输出: 2</p><p>说明: [0, 1] 是具有相同数量 0 和 1 的最长连续子数组。</p><p>示例 2:</p><p>输入: nums &#x3D; [0,1,0]</p><p>输出: 2</p><p>说明: [0, 1] (或 [1, 0]) 是具有相同数量 0 和 1 的最长连续子数组。</p><p>var findMaxLength &#x3D; function(nums) {</p><p>&#x2F;&#x2F; TODO</p><p>};</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote><p>&#x2F;&#x2F; 前缀和+哈希表<br>&#x2F;&#x2F; 由于「0 和 1 的数量相同」等价于「1 的数量减去 0 的数量等于 0」，我们可以将数组中的 0 视作 −1，则原问题转换成「求最长的连续子数组，其元素和为 0」。</p><p>&#x2F;&#x2F; 由于哈希表存储的是 counter 的每个取值第一次出现的下标，因此当遇到重复的前缀和时，根据当前下标和哈希表中存储的下标计算得到的子数组长度是以当前下标结尾的子数组中满足有相同数量的 0 和 1 的最长子数组的长度。遍历结束时，即可得到 nums 中的有相同数量的 0 和 1 的最长子数组的长度。</p></blockquote><h3 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> findMaxLength = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) &#123;<br>  <span class="hljs-keyword">let</span> maxLength = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br>  <span class="hljs-keyword">let</span> counter = <span class="hljs-number">0</span> <span class="hljs-comment">////存储newNums的前缀和即可</span><br>  map.<span class="hljs-title function_">set</span>(counter, -<span class="hljs-number">1</span>) <span class="hljs-comment">//合为key，索引为value,初始化索引为-1，和为0</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (nums[i] === <span class="hljs-number">1</span>) &#123;<br>      counter++<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      counter--<br>    &#125;<br>    <span class="hljs-keyword">if</span> (map.<span class="hljs-title function_">has</span>(counter)) &#123;<br>      maxLength = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(maxLength, i - map.<span class="hljs-title function_">get</span>(counter))<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      map.<span class="hljs-title function_">set</span>(counter, i)<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> maxLength<br>&#125;<br><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]<br><span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">findMaxLength</span>(arr1))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">findMaxLength</span>(arr2))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node 工具使用</title>
    <link href="/blog/2022/08/17/node/"/>
    <url>/blog/2022/08/17/node/</url>
    
    <content type="html"><![CDATA[<h2 id="nvm-安装和使用"><a href="#nvm-安装和使用" class="headerlink" title="nvm 安装和使用"></a>nvm 安装和使用</h2><ul><li><a href="http://nvm.uihtm.com/">nvm 一个 nodejs 版本管理工具！</a></li><li><a href="https://nodejs.org/en/">node 官网</a></li><li><a href="https://blog.csdn.net/QWERTYQ16/article/details/124497532">nvm 的简介、安装、使用（简单明了）</a></li><li><a href="https://github.com/coreybutler/nvm-windows/issues/145">安装后，每个命令都失败并显示消息“C:\Users%username%\AppData\Roaming\nvm 找不到或不存在。退出。”</a></li></ul><blockquote><p>常用命令</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 显示可下载版本的部分列表</span><br><span class="hljs-string">$</span> <span class="hljs-string">nvm</span> <span class="hljs-string">list</span> <span class="hljs-string">available</span><br><br><span class="hljs-comment"># 安装最新版本 ( 安装时可以在上面看到 node.js 、 npm 相应的版本号 ，不建议安装最新版本)</span><br><span class="hljs-string">$</span> <span class="hljs-string">nvm</span> <span class="hljs-string">install</span> <span class="hljs-string">latest</span><br><br><span class="hljs-comment"># 安装指定的版本的nodejs</span><br><span class="hljs-string">$</span> <span class="hljs-string">nvm</span> <span class="hljs-string">install</span> <span class="hljs-string">版本号</span><br><br><span class="hljs-comment"># 查看目前已经安装的版本 （ 当前版本号前面没有 * ， 此时还没有使用任何一个版本，这时使用 node.js 时会报错 ）</span><br><span class="hljs-string">$</span> <span class="hljs-string">nvm</span> <span class="hljs-string">list或</span> <span class="hljs-string">$</span> <span class="hljs-string">nvm</span> <span class="hljs-string">ls</span><br><br><span class="hljs-comment"># 使用指定版本的nodejs （ 这时会发现在启用的 node 版本前面有 * 标记，这时就可以使用 node.js ）</span><br><span class="hljs-string">$</span> <span class="hljs-string">nvm</span> <span class="hljs-string">use</span> <span class="hljs-string">版本号</span><br><br></code></pre></td></tr></table></figure><h3 id="nvm-常见问题"><a href="#nvm-常见问题" class="headerlink" title="nvm 常见问题"></a>nvm 常见问题</h3><p><strong>查看 nvm 路径</strong> <code>nvm root</code></p><blockquote><p>如果下载 node 过慢，请更换国内镜像源, 在 nvm 的安装路径下，找到 settings.txt，设置 node_mirro 与 npm_mirror 为国内镜像地址。下载就飞快了~~</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala">root: <span class="hljs-type">D</span>:\nvm<br>path: <span class="hljs-type">D</span>:\nodejs<br>node_mirror: https:<span class="hljs-comment">//npm.taobao.org/mirrors/node/</span><br>npm_mirror: https:<span class="hljs-comment">//npm.taobao.org/mirrors/npm/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>前端工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>umi4升级</title>
    <link href="/blog/2022/08/09/%E5%8D%87%E7%BA%A7umi4/"/>
    <url>/blog/2022/08/09/%E5%8D%87%E7%BA%A7umi4/</url>
    
    <content type="html"><![CDATA[<p> 工程已经升级到了 umi4（需要安装pnpm, 然后 pnpm install），下面罗列了一些变动须知：</p><h3 id="1、关于包管理器"><a href="#1、关于包管理器" class="headerlink" title="1、关于包管理器"></a>1、关于包管理器</h3><ol><li>换成了 pnpm  <a href="https://juejin.cn/post/7077918263954374670">理由</a></li><li>和 npm 使用方式一致</li></ol><h3 id="2、关于-umijs-x2F-max"><a href="#2、关于-umijs-x2F-max" class="headerlink" title="2、关于 @umijs&#x2F;max"></a>2、关于 @umijs&#x2F;max</h3><ol><li>umi 和 @umijs&#x2F;max 都是 umi，只不过 @umijs&#x2F;max 带业务需要的插件，所以需要使用 @umijs&#x2F;max</li></ol><h3 id="3、关于路由"><a href="#3、关于路由" class="headerlink" title="3、关于路由"></a>3、关于路由</h3><ol><li>路由从 react-router-dom@5 升级到了 react-router-dom@6  <a href="https://reactrouter.com/docs/en/v6">链接</a></li></ol><h3 id="4、关于-history-和-pathname-链接"><a href="#4、关于-history-和-pathname-链接" class="headerlink" title="4、关于 history 和 pathname  链接"></a>4、关于 history 和 pathname  <a href="https://umijs.org/docs/api/api#history">链接</a></h3><ol><li>umi 中的 history 是静态的，所以获取到的参数有问题。</li><li>pathname&#x2F;search&#x2F;hash 通过 window 来取值</li><li>采用 const navigate &#x3D; useNavigate();  <a href="https://umijs.org/docs/api/api#usenavigate">链接</a></li></ol><h3 id="5、关于-query-参数（search）"><a href="#5、关于-query-参数（search）" class="headerlink" title="5、关于 query 参数（search）"></a>5、关于 query 参数（search）</h3><ol><li>const params &#x3D; useParams();  <a href="https://umijs.org/docs/api/api#useparams">链接</a></li><li>createSearchParams(location.search)  <a href="https://umijs.org/docs/api/api#createsearchparams">链接</a></li></ol><p><strong>UmiJS 的文档，除了「开发一个 Blog」不看，剩下的都需要过一遍  <a href="https://umijs.org/docs/tutorials/getting-started">链接</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>前端框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>umi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>weekly 004</title>
    <link href="/blog/2022/08/08/004weekly/"/>
    <url>/blog/2022/08/08/004weekly/</url>
    
    <content type="html"><![CDATA[<h2 id="本期文章"><a href="#本期文章" class="headerlink" title="本期文章"></a>本期文章</h2><h3 id="七夕到了，还不快给你女朋友做一个专属-chrome-插件"><a href="#七夕到了，还不快给你女朋友做一个专属-chrome-插件" class="headerlink" title="七夕到了，还不快给你女朋友做一个专属 chrome 插件"></a><a href="https://juejin.cn/post/7122332008252080142">七夕到了，还不快给你女朋友做一个专属 chrome 插件</a></h3><p>七夕节马上就要到了，作为拥有对象（没有的话，可以选择 new 一个出来）的程序员来说，肯定是需要有一点表示才行的。用钱能买到的东西不一定能表达咱们的心意，但是用心去写的代码，还能让对象每天看到那才是最正确的选择。</p><p>除了手机之外，在电脑上使用浏览器搜索想要的东西是最常用的功能了，所以就需要一个打开即用的搜索框，而且还能表达心意的 chrome 标签页来让 TA 随时可用。</p><h3 id="写给前端的跨平台方案、跨端引擎的本质"><a href="#写给前端的跨平台方案、跨端引擎的本质" class="headerlink" title="写给前端的跨平台方案、跨端引擎的本质"></a><a href="https://juejin.cn/post/6966626823912308772">写给前端的跨平台方案、跨端引擎的本质</a></h3><p>近些年来，前端领域的跨端技术越来越多了：react native、weex、flutter、electron、kraken 等等。那么多跨端方案，他们有没有通用的思路？我们能不能从这么多方案中找出本质的原理？</p><p>本文会尝试探究探究以下问题：<br>什么是跨平台<br>有哪些方案是跨平台的<br>跨端和跨平台的区别是什么<br>前端领域有哪些跨端方案<br>跨平台、跨端的通用原理是什么</p><p>本文主要讲述了跨平台的概念、方案、优缺点，以及前端跨端的常见方案和原理，通过这篇文章可以理解跨端和跨平台容器的思路</p><h3 id="lerna-中文教程"><a href="#lerna-中文教程" class="headerlink" title="lerna 中文教程"></a><a href="https://juejin.cn/post/6844903856153821198?share_token=52703fb9-a8a2-4301-956a-31bb3fb19b43">lerna 中文教程</a></h3><p>Lerna 是一个工具，它优化了使用 git 和 npm 管理多包存储库的工作流。本文讲解了工作的两种模式：Fixed&#x2F;Locked mode (default)和 Independent mode；yarn 的 workspaces 模式；以及各种命令</p><p>让我们简单了解一下如何使用 lerna 来管理一个多包，以及 lerna 的主要配置和命令。</p><h3 id="Git-基础教程-必学"><a href="#Git-基础教程-必学" class="headerlink" title="Git 基础教程(必学)"></a><a href="https://mp.weixin.qq.com/s/0mGBRiG-kOa9rNL3qn9vVQ">Git 基础教程(必学)</a></h3><p>在工作中，发现不少同学对 Git 的掌握非常基础，同样作为版本控制系统，使用好 Git 比 SVN 要更有挑战，需要对 Git 有一定的了解，才能在工作中，驾驭好 Git。</p><p>本文从最简单的基础入门，讲解工作中常用的 Git 基础，掌握这些是 Git 进阶的基础，足够日常工作场景。</p><h3 id="牛逼，一款-996-代码分析工具"><a href="#牛逼，一款-996-代码分析工具" class="headerlink" title="牛逼，一款 996 代码分析工具"></a><a href="https://mp.weixin.qq.com/s?__biz=MzA3MzE4ODY0Mg==&mid=2455993889&idx=1&sn=7233d57b655d882a3e73386abba5e8ac&chksm=88850a6cbff2837a0eee062726b62415836b92c0ee5527a6c8a72993f255fa6bc1095600a5dd#rd">牛逼，一款 996 代码分析工具</a></h3><p>一个代码分析工具 code996，它可以统计 Git 项目的 commit 时间分布，进而推导出这个项目的编码工作强度。这算是一种对项目更了解的方式，杜绝 996 从了解数据开始。</p><p>code996 除了能够分析项目的实际工作强度，也能用来分析我们代码编写的情况，对自身了解自己代码编写效率的时段、最近的工作强度等都是非常好的一个输入</p><h3 id="如何优雅地在-React-中使用-TypeScript，看这一篇就够了！"><a href="#如何优雅地在-React-中使用-TypeScript，看这一篇就够了！" class="headerlink" title="如何优雅地在 React 中使用 TypeScript，看这一篇就够了！"></a><a href="https://juejin.cn/post/7021674818621669389">如何优雅地在 React 中使用 TypeScript，看这一篇就够了！</a></h3><p>本文讲解了 ypeScript 与 React 一起使用时经常遇到的一些类型定义的问题。阅读本文前，希望你能有一定的 React 和 TypeScript 基础。</p><p>你平时如何使用 ts, 鼠标点击事件对象类型是什么? 是不是用的最多的是 any 类型,最后 typescript 用成了 anyscript,typescript 也就失去了它存在的意义,本文将为你讲解如何在 react 中优雅的使用 typescript</p><h3 id="React-State-Hooks-useReducer-useState-useContext"><a href="#React-State-Hooks-useReducer-useState-useContext" class="headerlink" title="React State Hooks: useReducer, useState, useContext"></a><a href="https://www.robinwieruch.de/react-state-usereducer-usestate-usecontext/">React State Hooks: useReducer, useState, useContext</a></h3><p>作为 react 初学者，第一次弄懂了 useReducer, useState, useContext 的用法，在什么时候用，以及三者之间的区别。</p><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><ul><li><a href="https://github.com/aliyunfe/weekly">阿里云 TXD 前端周刊</a></li><li><a href="https://github.com/ascoders/weekly">前端精度周刊</a></li><li><a href="">o2team&#x2F;tech-weekly</a></li><li><a href="https://github.com/tnfe/TNT-Weekly/">tnfe&#x2F;TNT-Weekly</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>weekly</category>
      
    </categories>
    
    
    <tags>
      
      <tag>weekly</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>weekly 003</title>
    <link href="/blog/2022/08/01/003weekly/"/>
    <url>/blog/2022/08/01/003weekly/</url>
    
    <content type="html"><![CDATA[<h2 id="本期文章"><a href="#本期文章" class="headerlink" title="本期文章"></a>本期文章</h2><h3 id="成为优秀的-TS-体操高手-之-TS-类型体操前置知识储备"><a href="#成为优秀的-TS-体操高手-之-TS-类型体操前置知识储备" class="headerlink" title="成为优秀的 TS 体操高手 之 TS 类型体操前置知识储备"></a><a href="https://mp.weixin.qq.com/s/AOzZVxftMYEOfvhSFMV_fQ">成为优秀的 TS 体操高手 之 TS 类型体操前置知识储备</a></h3><p>TS 类型体操前置知识储备大概就介绍了 extends,infer,typeof,keyof 和 in,数组的使用,as 关键字</p><p>了解了这部分关键字作用之后，完成 TS 体操练习的中等难度的题目不在话下！（起码完成 80%的题目没得问题），剩下的 20% 还需要学习更多的 TS 体操技巧</p><h3 id="尤雨溪主题演讲《2022-前端生态趋势》全记录"><a href="#尤雨溪主题演讲《2022-前端生态趋势》全记录" class="headerlink" title="尤雨溪主题演讲《2022 前端生态趋势》全记录"></a><a href="https://juejin.cn/post/7123126028838862862">尤雨溪主题演讲《2022 前端生态趋势》全记录</a></h3><p>本文是<a href="https://conf.juejin.cn/xdc2022">第二届稀土开发者大会</a> 尤大关于 《2022 Web 前端生态趋势》 的主题分享整理。</p><p>React Hooks 的推出启发了很多组件逻辑表达和逻辑附用的新范式；但是同时提到了 React Hooks 对开发者存在的心智负担问题；而类 Vue3 的基于依赖追踪的范式重新得到了重视；基于编译的响应式系统和基于编译的运行时优化才是未来。</p><p>rust、go、zig 和 JavaScript 的混合工具链会成为前端构建工具的未来。</p><p>有时间的同学可以看看<a href="https://juejin.cn/live/xdc202201">回放</a></p><p>了解 2022 前端生态趋势；关注未来，适当的调整自己的学习路线、知识体系</p><h3 id="type-与-interface-的区别，你真的懂了吗？"><a href="#type-与-interface-的区别，你真的懂了吗？" class="headerlink" title="type 与 interface 的区别，你真的懂了吗？"></a><a href="https://mp.weixin.qq.com/s/mOB95li-tuaswWliGiYZyw">type 与 interface 的区别，你真的懂了吗？</a></h3><p>在写 ts 相关代码的过程中，总能看到 interface 和 type 的身影。它们的作用好像都一样的，相同的功能用哪一个都可以实现，也都很好用，所以也很少去真正的理解它们之间到底有啥区别， 分别在什么场景下使用，本文作者将带领大家一起探索 TS 中的 interface 和 type。</p><p>interface 和 type 之间的差异不仅仅是次要语法声明。那么，今天我们就来看看这两家伙之间存在啥不可告人的秘密。</p><h3 id="深入理解-Typescript-系列-泛型"><a href="#深入理解-Typescript-系列-泛型" class="headerlink" title="深入理解 Typescript 系列-泛型"></a><a href="https://juejin.cn/post/6996479857559339038">深入理解 Typescript 系列-泛型</a></h3><p>在日常开发中，时长会考虑到方法的复用性，毕竟对于相似的场景拷贝一份代码既增加了代码量还增加了额外的维护成本，要是重构的时候忘了，还会导致不可描述的 bug。</p><p>提高方法的复用性，减少代码维护成本。</p><h3 id="Git-基础教程-必学"><a href="#Git-基础教程-必学" class="headerlink" title="Git 基础教程(必学)"></a><a href="https://mp.weixin.qq.com/s/0mGBRiG-kOa9rNL3qn9vVQ">Git 基础教程(必学)</a></h3><p>在工作中，发现不少同学对 Git 的掌握非常基础，同样作为版本控制系统，使用好 Git 比 SVN 要更有挑战，需要对 Git 有一定的了解，才能在工作中，驾驭好 Git。</p><p>本文从最简单的基础入门，讲解工作中常用的 Git 基础，掌握这些是 Git 进阶的基础，足够日常工作场景。</p><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><ul><li><a href="https://github.com/aliyunfe/weekly">阿里云 TXD 前端周刊</a></li><li><a href="https://github.com/ascoders/weekly">前端精度周刊</a></li><li><a href="">o2team&#x2F;tech-weekly</a></li><li><a href="https://github.com/tnfe/TNT-Weekly/">tnfe&#x2F;TNT-Weekly</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>weekly</category>
      
    </categories>
    
    
    <tags>
      
      <tag>weekly</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>weekly 002</title>
    <link href="/blog/2022/07/25/002weekly/"/>
    <url>/blog/2022/07/25/002weekly/</url>
    
    <content type="html"><![CDATA[<h2 id="本期文章"><a href="#本期文章" class="headerlink" title="本期文章"></a>本期文章</h2><h3 id="函数式组件与类组件有何不同？"><a href="#函数式组件与类组件有何不同？" class="headerlink" title="函数式组件与类组件有何不同？"></a><a href="https://juejin.cn/post/7100874690884796447">函数式组件与类组件有何不同？</a></h3><p>详细介绍了函数组件与类组件里 props 的用法，详细介绍了函数组件在一次特定的渲染中捕获那一次渲染所用的 props 或者 state，他们总是会保持一致。在类组件中如果对 this.props 直接引用容易给自己埋坑。</p><p>当我们用函数来编写大部分的 React 代码时，我们需要调整关于优化代码和什么变量会随着时间改变的认知与直觉。</p><h3 id="一行-CSS-代码搞定响应式布局"><a href="#一行-CSS-代码搞定响应式布局" class="headerlink" title="一行 CSS 代码搞定响应式布局"></a><a href="https://mp.weixin.qq.com/s/tGm77W7t2fbLTNNxwlo_EQ">一行 CSS 代码搞定响应式布局</a></h3><p>在这篇文章中，我将教你如何使用 CSS Grid 来创建一个超酷的图像网格图，它将根据屏幕的宽度来改变列的数量。最精彩的地方在于：所有的响应特性被添加到了一行 css 代码中。这意味着我们不必将 HTML 与丑陋的类名(如 col-sm-4, col-md-8)混杂在一起，也不必为每个屏幕创建媒体查询。</p><h3 id="高性能深拷贝"><a href="#高性能深拷贝" class="headerlink" title="高性能深拷贝"></a><a href="https://juejin.cn/post/7122034570043588622">高性能深拷贝</a></h3><p>“说一下深拷贝的实现方式”, 答: “JSON.parse(JSON.stringify())、lodash 的 cloneDeep, 递归遍历…”, 相信我们大多数人在面试的过程中被问到过这个问题, 你是怎么回答的? 递归是不是你的最优解? 本文将为你介绍一种更高性能的深拷贝, 相信学完本文, 你一定能够打动面试官, 让你更轻松的斩获 offer</p><h3 id="前端如何学习更有计划性、提升更稳更快？"><a href="#前端如何学习更有计划性、提升更稳更快？" class="headerlink" title="前端如何学习更有计划性、提升更稳更快？"></a><a href="https://mp.weixin.qq.com/s?__biz=MzI2MjYzMjYwNg==&mid=2247487730&idx=1&sn=4dadced98833aa8b2f04747359dc484f&chksm=ea497503dd3efc153bd9feca2b1db4967a8ac9866335de8a8979568faeeb0ea45849367c9b68#rd">前端如何学习更有计划性、提升更稳更快？</a></h3><p>我们学习是为了自己，是为了真正的解决问题，切忌“假装学习”。虽然系统学习看起来很不错，但从自己的兴趣和工作出发，是更好的学习方向。在具体的学习中，应强调输出，以教为学，每一个困难的地方都是超车的机会，以慢为快，踏实的打牢基础知识点。</p><p>学习是一个系统，我们不能总是依赖意志力，要讲究方法、技巧、环境等，引导自己做事的兴趣、热情和成就感，这样你才会越做越起劲，最后不断地运转下去。</p><ul><li>以教促学</li><li>困难的地方就是你弯道超车的地方</li><li>以慢为快</li><li>坚定的信念</li><li>学习的“反人性”问题</li><li>即时反馈</li><li>合适的环境和氛围</li></ul><h3 id="es2022-新特性提前了解"><a href="#es2022-新特性提前了解" class="headerlink" title="es2022 新特性提前了解"></a><a href="https://juejin.cn/post/7073285958791069704">es2022 新特性提前了解</a></h3><p>新版本的 ECMA Script 将在今年六月成为标准。本文带我们看 ES2022 有什么新特性。</p><p>许多人期待 ES2022（ES13） 会带来哪些新的特性。这篇文章讲解了 es2022 新增的几个特性，一目了然，跟以前的用法有的有些不同，但是用起来更方便了。</p><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><ul><li><a href="https://github.com/aliyunfe/weekly">阿里云 TXD 前端周刊</a></li><li><a href="https://github.com/ascoders/weekly">前端精度周刊</a></li><li><a href="">o2team&#x2F;tech-weekly</a></li><li><a href="https://github.com/tnfe/TNT-Weekly/">tnfe&#x2F;TNT-Weekly</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>weekly</category>
      
    </categories>
    
    
    <tags>
      
      <tag>weekly</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>weekly 001111</title>
    <link href="/blog/2022/07/18/001weekly/"/>
    <url>/blog/2022/07/18/001weekly/</url>
    
    <content type="html"><![CDATA[<h2 id="本期文章"><a href="#本期文章" class="headerlink" title="本期文章"></a>本期文章</h2><h3 id="关于代码评审-CodeReview-那些不得不说的事儿"><a href="#关于代码评审-CodeReview-那些不得不说的事儿" class="headerlink" title="关于代码评审(CodeReview)那些不得不说的事儿"></a><a href="https://juejin.cn/post/7100874690884796447">关于代码评审(CodeReview)那些不得不说的事儿</a></h3><p>本文作者在学习了<a href="https://eng-practices-cn.xindoo.xyz/review/index">Google Code Review 指南</a>的基础上；总结了长期做 CodeReview 的好处：提声代码质量、提前发现问题、经验和知识的传递；CodeReview 的关注点：功能性、复杂性、代码风格、文档&amp;注释、代码亮点；还指出了 CodeReview 应该及时；以及注意的礼节，reviewer 写得好的地方也应该点赞；</p><p>本文还指导大家如何才能写出对 CodeReview 友好的代码：提交前先做好自审、写清楚变更描述、单个变更竟可能短；</p><p>关于 CodeReview 的误区该文也做了合理的反驳，例如 CodeReview 是纯浪费时间？工期很紧没时间去做 CodeReivew;只有高级工程师才有资格 Reivewe 别人的代码？都有测试流程了，为什么还要做 CodeReview？有了 CodeReview 就不需要测试了？只要我在团队推行了 CodeReview 流程，代码质量就会迅速提高？</p><h3 id="详解-js-继承的那些事儿"><a href="#详解-js-继承的那些事儿" class="headerlink" title="详解 js 继承的那些事儿"></a><a href="https://blog.csdn.net/qq_34574204/article/details/120716964">详解 js 继承的那些事儿</a></h3><p>本文作者带你学习 js 的继承，原型，原型链的底层知识和原理；你会了解到以下知识什么是继承；为什么要有继承；继承的相关 6 种实现方式及优缺点。</p><h3 id="贪吃蛇小游戏开发思路分享"><a href="#贪吃蛇小游戏开发思路分享" class="headerlink" title="贪吃蛇小游戏开发思路分享"></a><a href="https://juejin.cn/post/7051411538577457183">贪吃蛇小游戏开发思路分享</a></h3><p>如何用数组表示游戏地图，数组的周边嗅探，数组边界检测；还有碰撞检测。看完之后，抖音最火的游戏吃掉那个苹果就可以自己写了。</p><h3 id="TypeScript-泛型中的-K、T、V-等到底是个啥？"><a href="#TypeScript-泛型中的-K、T、V-等到底是个啥？" class="headerlink" title="TypeScript 泛型中的 K、T、V 等到底是个啥？"></a><a href="https://juejin.cn/post/7084410879223005215">TypeScript 泛型中的 K、T、V 等到底是个啥？</a></h3><p>当你首次看到 TypeScript 泛型中的 T 会感到陌生么？<br>那么 T 是什么意思呢？图中的泛型变量 T 表示 Type，实际上 T 可以用任何有效的名称代替。除了 T 之外，常见的泛型变量还有 K、V 和 E 等。</p><ul><li>K 全称 Key 表示对象中键的类型；</li><li>V 全称 Value 表示对象中值的类型；</li><li>E 全称 Element 表示元素类型。</li></ul><h3 id="45-个-GIT-经典操作场景，专治不会合代码"><a href="#45-个-GIT-经典操作场景，专治不会合代码" class="headerlink" title="45 个 GIT 经典操作场景，专治不会合代码"></a><a href="https://mp.weixin.qq.com/s/2p4m63JdsCjBpVku-WaZyA">45 个 GIT 经典操作场景，专治不会合代码</a></h3><p>本文作者整理了 45 个日常用 git 合代码的经典操作场景，基本覆盖了工作中的需求。</p><ul><li>读完本篇文章你会了解到以下知识：</li><li>提交（Committing） 处理，如：commit message 写错了，删除任意 commit 等等；</li><li>暂存（Staging）处理，如：我需要把暂存的内容添加到上一次的提交（commit）等等；</li><li>分支（branches）处理：如：我想提交到一个新分支，但错误提交到了 main 等等;</li><li>变基（Rebasing）和合并（Merging）处理，如：撤销 rebase&#x2F;merge，有冲突的情况等待。</li></ul><h3 id="Vite-3-0-发布，下一代的前端工具链"><a href="#Vite-3-0-发布，下一代的前端工具链" class="headerlink" title="Vite 3.0 发布，下一代的前端工具链"></a><a href="https://www.oschina.net/news/202953/vite-3-0-released">Vite 3.0 发布，下一代的前端工具链</a></h3><p>Vite 3.0 现已于 2022 年 7 月 15 正式发布；Vite3.0 新特性一览；之后 vite 准备每年会发一个大版本。</p><h3 id="他来了！性能吊打-Node-js-和-Deno-的新一代-javaScript-运行时！"><a href="#他来了！性能吊打-Node-js-和-Deno-的新一代-javaScript-运行时！" class="headerlink" title="他来了！性能吊打 Node.js 和 Deno 的新一代 javaScript 运行时！"></a><a href="https://mp.weixin.qq.com/s?__biz=Mzg5NDEyMzA2NQ==&mid=2247488883&idx=1&sn=1ec39e6e52849ea2deb2dbbed26cc2df&chksm=c0253825f752b13303aa204bdfa93eb5979999cf5c61224726673f552ab5406ce9a506a6e7b5#rd">他来了！性能吊打 Node.js 和 Deno 的新一代 javaScript 运行时！</a></h3><p>刚开源不到一个月就获得了 19.5k star！看起来马上就会成为 Node.js 和 Deno 的一大竞争对手了！</p><p>和传统的 Node.js 这种传统的 javaScript 运行时不同，Bun.js 直接内置了打包器、转译器、任务运行器和 npm 客户端，这意味着你不再需要 Webpack&#x2F;Rollup&#x2F;esbuild&#x2F;Snowpack&#x2F;Parcel&#x2F;Rome&#x2F;swc&#x2F;babel 就可以直接运行 TypeScript、JSX！</p><p>另外，Bun.js 原生支持了数百个 Node.js 和 Web API，包括约 90% 的 Node-API 函数(fs、path、Buffer 等)。</p><p>Bun.js 的目标是可以在浏览器之外的其他地方运行世界上大多数 JavaScript，为你未来的基础架构带来性能和复杂性的增强，并通过更好、更简单的工具提高开发者的生产力！</p><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><ul><li><a href="https://github.com/aliyunfe/weekly">阿里云 TXD 前端周刊</a></li><li><a href="https://github.com/ascoders/weekly">前端精度周刊</a></li><li><a href="">o2team&#x2F;tech-weekly</a></li><li><a href="https://github.com/tnfe/TNT-Weekly/">tnfe&#x2F;TNT-Weekly</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>weekly</category>
      
    </categories>
    
    
    <tags>
      
      <tag>weekly</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Object.prototype.hasOwnProperty()和 Object.hasOwn()</title>
    <link href="/blog/2022/07/09/Object.prototype.hasOwnProperty()andObject.hasOwn()%20copy/"/>
    <url>/blog/2022/07/09/Object.prototype.hasOwnProperty()andObject.hasOwn()%20copy/</url>
    
    <content type="html"><![CDATA[<h1 id="Object-prototype-hasOwnProperty-和-Object-hasOwn"><a href="#Object-prototype-hasOwnProperty-和-Object-hasOwn" class="headerlink" title="Object.prototype.hasOwnProperty()和 Object.hasOwn()"></a>Object.prototype.hasOwnProperty()和 Object.hasOwn()</h1><h3 id="Object-prototype-hasOwnProperty"><a href="#Object-prototype-hasOwnProperty" class="headerlink" title="Object.prototype.hasOwnProperty()"></a><code>Object.prototype.hasOwnProperty()</code></h3><p><code>hasOwnProperty()</code> 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> object1 = &#123;&#125;<br>object1.<span class="hljs-property">property1</span> = <span class="hljs-number">42</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object1.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&quot;property1&quot;</span>))<br><span class="hljs-comment">// expected output: true</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object1.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&quot;toString&quot;</span>))<br><span class="hljs-comment">// expected output: false</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object1.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&quot;hasOwnProperty&quot;</span>))<br><span class="hljs-comment">// expected output: false</span><br></code></pre></td></tr></table></figure><h3 id="Object-hasOwn"><a href="#Object-hasOwn" class="headerlink" title="Object.hasOwn()"></a><code>Object.hasOwn()</code></h3><blockquote><p><strong>注意：</strong> <code>Object.hasOwn()</code>旨在替代<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty"><code>Object.hasOwnProperty()</code></a>.</p></blockquote><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p><code>hasOwn(instance, prop)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> object1 = &#123;<br>  <span class="hljs-attr">prop</span>: <span class="hljs-string">&quot;exists&quot;</span>,<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">hasOwn</span>(object1, <span class="hljs-string">&quot;prop&quot;</span>))<br><span class="hljs-comment">// expected output: true</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">hasOwn</span>(object1, <span class="hljs-string">&quot;toString&quot;</span>))<br><span class="hljs-comment">// expected output: false</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">hasOwn</span>(object1, <span class="hljs-string">&quot;undeclaredPropertyValue&quot;</span>))<br><span class="hljs-comment">// expected output: false</span><br></code></pre></td></tr></table></figure><h4 id="hasOwn和-in-的区别"><a href="#hasOwn和-in-的区别" class="headerlink" title="hasOwn和 in 的区别"></a><code>hasOwn</code>和 in 的区别</h4><blockquote><p>以下示例区分直接属性和通过原型链继承的属性：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> example = &#123;&#125;<br>example.<span class="hljs-property">prop</span> = <span class="hljs-string">&quot;exists&quot;</span><br><br><span class="hljs-comment">// `hasOwn` will only return true for direct properties:</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">hasOwn</span>(example, <span class="hljs-string">&quot;prop&quot;</span>) <span class="hljs-comment">// returns true</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">hasOwn</span>(example, <span class="hljs-string">&quot;toString&quot;</span>) <span class="hljs-comment">// returns false</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">hasOwn</span>(example, <span class="hljs-string">&quot;hasOwnProperty&quot;</span>) <span class="hljs-comment">// returns false</span><br><br><span class="hljs-comment">// The `in` operator will return true for direct or inherited properties:</span><br><span class="hljs-string">&quot;prop&quot;</span> <span class="hljs-keyword">in</span> example <span class="hljs-comment">// returns true</span><br><span class="hljs-string">&quot;toString&quot;</span> <span class="hljs-keyword">in</span> example <span class="hljs-comment">// returns true</span><br><span class="hljs-string">&quot;hasOwnProperty&quot;</span> <span class="hljs-keyword">in</span> example <span class="hljs-comment">// returns true</span><br></code></pre></td></tr></table></figure><h3 id="hasOwnProperty-存在的问题"><a href="#hasOwnProperty-存在的问题" class="headerlink" title="hasOwnProperty 存在的问题"></a><code>hasOwnProperty</code> 存在的问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> foo = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>);<br>foo.<span class="hljs-property">prop</span> = <span class="hljs-string">&#x27;exists&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">hasOwn</span>(foo, <span class="hljs-string">&#x27;prop&#x27;</span>)) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">prop</span>); <span class="hljs-comment">//true - 与该对象怎么创建的没关系</span><br><span class="hljs-keyword">if</span> (foo.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;prop&#x27;</span>)) &#123;<span class="hljs-comment">//  TypeError: foo.hasOwnProperty is not a function</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">prop</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create"><code>Object.create(null)</code></a>. 这些不继承自<code>Object.prototype</code>，因此<code>hasOwnProperty()</code>无法访问。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>for...of循环和for...in循环区别</title>
    <link href="/blog/2022/07/09/for...of%E5%BE%AA%E7%8E%AF%E5%92%8Cfor...in%E5%BE%AA%E7%8E%AF%E5%8C%BA%E5%88%AB/"/>
    <url>/blog/2022/07/09/for...of%E5%BE%AA%E7%8E%AF%E5%92%8Cfor...in%E5%BE%AA%E7%8E%AF%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="for…of-循环和-for…in-循环区别"><a href="#for…of-循环和-for…in-循环区别" class="headerlink" title="for…of 循环和 for…in 循环区别"></a>for…of 循环和 for…in 循环区别</h1><h3 id="for…of-循环"><a href="#for…of-循环" class="headerlink" title="for…of 循环"></a>for…of 循环</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>一个数据结构只要部署了<code>Symbol.iterator</code>属性，就被视为具有 iterator 接口，就可以用<code>for...of</code>循环遍历它的成员。也就是说，<code>for...of</code>循环内部调用的是数据结构的<code>Symbol.iterator</code>方法。</p><p><code>for...of</code>循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如<code>arguments</code>对象、<code>DOM NodeList</code> 对象、Generator 对象，以及字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// 原型链上  Symbol(Symbol.iterator): ƒ values()</span><br></code></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p><code>for...of</code>循环调用遍历器接口，数组的遍历器接口只返回具有数字索引的属性。这一点跟<code>for...in</code>循环也不一样。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">let arr = [<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>];<br>arr.foo = <span class="hljs-string">&#x27;hello&#x27;</span>;<br><br><span class="hljs-keyword">for</span> (let i <span class="hljs-keyword">in</span> arr) &#123;<br>  console.log(i); <span class="hljs-regexp">//</span> <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;foo&quot;</span><br>&#125;<br><br><span class="hljs-keyword">for</span> (let i of arr) &#123;<br>  console.log(i); <span class="hljs-regexp">//</span>  <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;7&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="for…in-循环"><a href="#for…in-循环" class="headerlink" title="for…in 循环"></a>for…in 循环</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p><code>for...in</code> 语句以任意顺序迭代对象的可枚举属性，会遍历手动添加的其他键，甚至包括原型链上的键，只能获得对象的键名，不能直接获取键，为遍历对象而设计。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">objCustom</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">arrCustom</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-keyword">let</span> iterable = [<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>]<br>iterable.<span class="hljs-property">foo</span> = <span class="hljs-string">&quot;hello&quot;</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> iterable) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i) <span class="hljs-comment">// &quot;0&quot;、&quot;1&quot;、&quot;2&quot;, &quot;foo&quot;, &quot;arrCustom&quot;, &quot;objCustom&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>for...in</code>循环有几个缺点。</p><ul><li>数组的键名是数字，但是<code>for...in</code>循环是以字符串作为键名“0”、“1”、“2”等等。</li><li><code>for...in</code>循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。</li><li>某些情况下，<code>for...in</code>循环会以任意顺序遍历键名。</li></ul><p>总之，<code>for...in</code>循环主要是为遍历对象而设计的，不适用于遍历数组。</p><p><code>for...of</code>循环相比上面几种做法，有一些显著的优点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> myArray) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>有着同<code>for...in</code>一样的简洁语法，但是没有<code>for...in</code>那些缺点。</li><li>不同于<code>forEach</code>方法，它可以与<code>break</code>、<code>continue</code>和<code>return</code>配合使用。</li><li>提供了遍历所有数据结构的统一操作接口。</li></ul><p>下面是一个使用 break 语句，跳出<code>for...of</code>循环的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> n <span class="hljs-keyword">of</span> fibonacci) &#123;<br>  <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1000</span>) <span class="hljs-keyword">break</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n)<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的例子，会输出斐波纳契数列小于等于 1000 的项。如果当前项大于 1000，就会使用<code>break</code>语句跳出<code>for...of</code>循环。</p>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>es6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git常见命令使用</title>
    <link href="/blog/2022/07/09/git/"/>
    <url>/blog/2022/07/09/git/</url>
    
    <content type="html"><![CDATA[<h1 id="git-常见命令使用"><a href="#git-常见命令使用" class="headerlink" title="git 常见命令使用"></a>git 常见命令使用</h1><h2 id="git-仓库初始化"><a href="#git-仓库初始化" class="headerlink" title="git 仓库初始化"></a>git 仓库初始化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">echo <span class="hljs-string">&quot;# test&quot;</span> &gt;&gt; <span class="hljs-variable constant_">README</span>.<span class="hljs-property">md</span><br>git init<br>git add <span class="hljs-variable constant_">README</span>.<span class="hljs-property">md</span><br>git commit -m <span class="hljs-string">&quot;first commit&quot;</span><br>git branch -M main<br>git remote add origin git@github.<span class="hljs-property">com</span>:xxx.<span class="hljs-property">git</span><br>git push -u origin main<br><br></code></pre></td></tr></table></figure><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p><code>git reset</code>命令用于将当前分支指向另一个位置。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 将当期分支的指针倒退三个 commit，</span><br><span class="hljs-comment"># 并且会改变暂存区</span><br><span class="hljs-string">$</span> <span class="hljs-string">git</span> <span class="hljs-string">reset</span> <span class="hljs-string">HEAD~3</span><br><span class="hljs-comment"># 倒退指针的同时，不改变暂存区</span><br><span class="hljs-string">$</span> <span class="hljs-string">git</span> <span class="hljs-string">reset</span> <span class="hljs-string">--soft</span> <span class="hljs-string">HEAD~3</span><br><span class="hljs-comment"># 倒退指针的同时，改变工作区</span><br><span class="hljs-string">$</span> <span class="hljs-string">git</span> <span class="hljs-string">reset</span> <span class="hljs-string">--hard</span> <span class="hljs-string">HEAD~3</span><br></code></pre></td></tr></table></figure><p>如果不指定回滚的位置，那么等同于撤销修改。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 撤销上一次向暂存区添加的所有文件</span><br><span class="hljs-string">$</span> <span class="hljs-string">git</span> <span class="hljs-string">reset</span><br><span class="hljs-comment"># 无任何效果</span><br><span class="hljs-string">$</span> <span class="hljs-string">git</span> <span class="hljs-string">reset</span> <span class="hljs-string">--soft</span><br><span class="hljs-comment"># 同时撤销暂存区和工作区的修改，</span><br><span class="hljs-comment"># 回复到上一次提交的状态</span><br><span class="hljs-string">$</span> <span class="hljs-string">git</span> <span class="hljs-string">reset</span> <span class="hljs-string">--hard</span><br><span class="hljs-comment"># 撤销上一次向暂存区添加的某个指定文件，</span><br><span class="hljs-comment"># 不影响工作区中的该文件</span><br><span class="hljs-string">$</span> <span class="hljs-string">git</span> <span class="hljs-string">reset</span> <span class="hljs-string">--</span> <span class="hljs-string">&lt;filename&gt;</span><br></code></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul><li>soft: 不改变工作区和缓存区，只移动 HEAD 到指定 commit。</li><li>mixed: 只改变缓存区，不改变工作区。这是默认参数，通常用于撤销<code>git add</code>。</li><li>hard：改变工作区和暂存区到指定 commit。该参数等同于重置，可能会引起数据损失。<code>git reset --hard</code>等同于<code>git reset --hard HEAD</code>。</li><li><code>-p</code>表示键入交互模式，指定暂存区的哪些部分需要撤销。</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Undo add</span><br><span class="hljs-string">$</span> <span class="hljs-string">git</span> <span class="hljs-string">reset</span><br><span class="hljs-comment"># Undo a commit，不重置工作区和缓存区</span><br><span class="hljs-comment"># 回到 HEAD 之前的那个 commit</span><br><span class="hljs-string">$</span> <span class="hljs-string">git</span> <span class="hljs-string">reset</span> <span class="hljs-string">--soft</span> <span class="hljs-string">HEAD^</span><br><span class="hljs-comment"># Undo a commit，重置工作区和缓存区</span><br><span class="hljs-comment"># 连续撤销三个 commit：HEAD, HEAD^, and HEAD~2</span><br><span class="hljs-string">$</span> <span class="hljs-string">git</span> <span class="hljs-string">reset</span> <span class="hljs-string">--hard</span> <span class="hljs-string">HEAD~3</span><br><span class="hljs-comment"># 从暂存区移除指定文件，但不改变工作区中的该文件</span><br><span class="hljs-string">$</span> <span class="hljs-string">git</span> <span class="hljs-string">reset</span> <span class="hljs-string">--</span> <span class="hljs-string">frotz.c</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>前端工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ahooks学习</title>
    <link href="/blog/2022/06/01/ahooks/"/>
    <url>/blog/2022/06/01/ahooks/</url>
    
    <content type="html"><![CDATA[<h2 id="aHooks"><a href="#aHooks" class="headerlink" title="aHooks"></a>aHooks</h2><h3 id="useRequest"><a href="#useRequest" class="headerlink" title="useRequest"></a>useRequest</h3><ul><li><p>公司</p><ul><li><p>组建内</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; xxx &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/services/xxx&quot;</span><br><br><span class="hljs-keyword">const</span> &#123;<br>  <span class="hljs-attr">data</span>: xxx,<br>  error,<br>  loading,<br>&#125; = <span class="hljs-title function_">useRequest</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">APIxxx</span>(&#123; merchantId &#125;))<br></code></pre></td></tr></table></figure></li><li><p>@&#x2F;services&#x2F;xxx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; request &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;umi&quot;</span><br><br><span class="hljs-comment">// 判断是否创建过loyalty</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">APIxxx</span>(<span class="hljs-params">params: xxx</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(<span class="hljs-string">`/xxx/<span class="hljs-subst">$&#123;params&#125;</span>`</span>, &#123;<br>    params,<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>代理位置&#x2F;config&#x2F;proxy</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;/api-xxx/&#x27;</span>: &#123;<br>          <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://xxx&#x27;</span>,<br>          <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">pathRewrite</span>: &#123; <span class="hljs-string">&#x27;^/api-xxx/&#x27;</span>: <span class="hljs-string">&#x27;/&#x27;</span> &#125;,<br>      &#125;,<br></code></pre></td></tr></table></figure></li></ul></li><li><p>默认用法&#x2F;自动触发</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useRequest &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;ahooks&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Mock</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;mockjs&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUsername</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">Promise</span>&lt;string&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(<span class="hljs-string">&quot;@name&quot;</span>))<br>    &#125;, <span class="hljs-number">1000</span>)<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; data, error, loading &#125; = <span class="hljs-title function_">useRequest</span>(getUsername)<br><br>  <span class="hljs-keyword">if</span> (error) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>failed to load<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (loading) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>loading...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Username: &#123;data&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>手动触发<ul><li>run</li><li>runAsync</li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [state, setState] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">const</span> &#123; loading, runAsync &#125; = <span class="hljs-title function_">useRequest</span>(editUsername, &#123;<br>  <span class="hljs-attr">manual</span>: <span class="hljs-literal">true</span>,<br>&#125;)<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onClick</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">runAsync</span>(state)<br>    <span class="hljs-title function_">setState</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    message.<span class="hljs-title function_">success</span>(<span class="hljs-string">`The username was changed to &quot;<span class="hljs-subst">$&#123;state&#125;</span>&quot; !`</span>)<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    message.<span class="hljs-title function_">error</span>(error.<span class="hljs-property">message</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>生命周期<ul><li><code>onBefore</code>：请求之前触发</li><li><code>onSuccess</code>：请求成功触发</li><li><code>onError</code>：请求失败触发</li><li><code>onFinally</code>：请求完成触发</li></ul></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useRequest &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;ahooks&quot;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">editUsername</span>(<span class="hljs-params">username: string</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-keyword">void</span>&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &gt; <span class="hljs-number">0.5</span>) &#123;<br>        <span class="hljs-title function_">resolve</span>()<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Failed to modify username&quot;</span>))<br>      &#125;<br>    &#125;, <span class="hljs-number">1000</span>)<br>  &#125;)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [state, setState] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>)<br>  <span class="hljs-keyword">const</span> &#123; loading, run &#125; = <span class="hljs-title function_">useRequest</span>(editUsername, &#123;<br>    <span class="hljs-attr">manual</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">onBefore</span>: <span class="hljs-function">(<span class="hljs-params">params</span>) =&gt;</span> &#123;<br>      message.<span class="hljs-title function_">info</span>(<span class="hljs-string">`Start Request: <span class="hljs-subst">$&#123;params[<span class="hljs-number">0</span>]&#125;</span>`</span>)<br>    &#125;,<br>    <span class="hljs-attr">onSuccess</span>: <span class="hljs-function">(<span class="hljs-params">result, params</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">setState</span>(<span class="hljs-string">&quot;&quot;</span>)<br>      message.<span class="hljs-title function_">success</span>(<span class="hljs-string">`The username was changed to &quot;<span class="hljs-subst">$&#123;params[<span class="hljs-number">0</span>]&#125;</span>&quot; !`</span>)<br>    &#125;,<br>    <span class="hljs-attr">onError</span>: <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>      message.<span class="hljs-title function_">error</span>(error.<span class="hljs-property">message</span>)<br>    &#125;,<br>    <span class="hljs-attr">onFinally</span>: <span class="hljs-function">(<span class="hljs-params">params, result, error</span>) =&gt;</span> &#123;<br>      message.<span class="hljs-title function_">info</span>(<span class="hljs-string">`Request finish`</span>)<br>    &#125;,<br>  &#125;)<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setState(e.target.value)&#125; value=&#123;state&#125; /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&#123;loading&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> run(state)&#125;&gt;</span><br><span class="language-xml">        &#123;loading ? &quot;Loading&quot; : &quot;Edit&quot;&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>刷新重复请求</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123; data, loading, run, refresh &#125; = <span class="hljs-title function_">useRequest</span>(<br>  <span class="hljs-function">(<span class="hljs-params">id: number</span>) =&gt;</span> <span class="hljs-title function_">getUsername</span>(id),<br>  &#123;<br>    <span class="hljs-attr">manual</span>: <span class="hljs-literal">true</span>,<br>  &#125;<br>)<br><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">run</span>(<span class="hljs-number">1</span>)<br>&#125;, [])<br>;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;refresh&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span></span><br><span class="language-xml">  Refresh</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>立即变更数据</p></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; useRequest &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ahooks&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUsername</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">Promise</span>&lt;string&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(<span class="hljs-string">&#x27;@name&#x27;</span>));<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">editUsername</span>(<span class="hljs-params">username: string</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-keyword">void</span>&gt; &#123;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; &#123;<br>  <span class="hljs-comment">// store last username</span><br>  <span class="hljs-keyword">const</span> lastRef = useRef&lt;string&gt;();<br><br>  <span class="hljs-keyword">const</span> [state, setState] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><br>  <span class="hljs-comment">// get username</span><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: username, mutate &#125; = <span class="hljs-title function_">useRequest</span>(getUsername);<br><br>  <span class="hljs-comment">// edit username</span><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">run</span>: edit &#125; = <span class="hljs-title function_">useRequest</span>(editUsername, &#123;<br>    <span class="hljs-attr">manual</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">onError</span>: <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>      message.<span class="hljs-title function_">error</span>(error.<span class="hljs-property">message</span>);<br>      <span class="hljs-title function_">mutate</span>(lastRef.<span class="hljs-property">current</span>);<br>    &#125;,<br>  &#125;);<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">onChange</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    lastRef.<span class="hljs-property">current</span> = username;<br>    <span class="hljs-title function_">mutate</span>(state);<br>    <span class="hljs-title function_">edit</span>(state);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Username: &#123;username&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setState(e.target.value)&#125;</span><br><span class="language-xml">        value=&#123;state&#125;</span><br><span class="language-xml">        placeholder=&quot;Please enter username&quot;</span><br><span class="language-xml">        style=&#123;&#123; width: 240, marginRight: 16 &#125;&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onChange&#125;</span>&gt;</span></span><br><span class="language-xml">        Edit</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>取消请求</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123; loading, run, cancel &#125; = <span class="hljs-title function_">useRequest</span>(editUsername, &#123;<br>  <span class="hljs-attr">manual</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">onSuccess</span>: <span class="hljs-function">(<span class="hljs-params">result, params</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">setState</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    message.<span class="hljs-title function_">success</span>(<span class="hljs-string">`The username was changed to &quot;<span class="hljs-subst">$&#123;params[<span class="hljs-number">0</span>]&#125;</span>&quot; !`</span>)<br>  &#125;,<br>  <span class="hljs-attr">onError</span>: <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    message.<span class="hljs-title function_">error</span>(error.<span class="hljs-property">message</span>)<br>  &#125;,<br>&#125;)<br>;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;cancel&#125;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">marginLeft:</span> <span class="hljs-attr">16</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">  Cancel</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>参数管理</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> &#123;<br>  <span class="hljs-attr">data</span>: username,<br>  run,<br>  params,<br>&#125; = <span class="hljs-title function_">useRequest</span>(getUsername, &#123;<br>  <span class="hljs-attr">defaultParams</span>: [<span class="hljs-string">&quot;1&quot;</span>],<br>&#125;)<br>;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">marginTop:</span> <span class="hljs-attr">8</span> &#125;&#125;&gt;</span>UserId: &#123;params[0]&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="Api"><a href="#Api" class="headerlink" title="Api"></a>Api</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> &#123;<br>  <span class="hljs-attr">loading</span>: <span class="hljs-built_in">boolean</span>,<br>  data?: <span class="hljs-title class_">TData</span>,<br>  error?: <span class="hljs-title class_">Error</span>,<br>  <span class="hljs-attr">params</span>: <span class="hljs-title class_">TParams</span> || [],<br>  <span class="hljs-attr">run</span>: <span class="hljs-function">(<span class="hljs-params">...params: TParams</span>) =&gt;</span> <span class="hljs-built_in">void</span>,<br>  <span class="hljs-attr">runAsync</span>: <span class="hljs-function">(<span class="hljs-params">...params: TParams</span>) =&gt;</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">TData</span>&gt;,<br>  <span class="hljs-attr">refresh</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>,<br>  <span class="hljs-attr">refreshAsync</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">TData</span>&gt;,<br>  <span class="hljs-attr">mutate</span>: <span class="hljs-function">(<span class="hljs-params">data?: TData | ((oldData?: TData) =&gt; (TData | <span class="hljs-literal">undefined</span>))</span>) =&gt;</span> <span class="hljs-built_in">void</span>,<br>  <span class="hljs-attr">cancel</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>,<br>&#125; = useRequest&lt;<span class="hljs-title class_">TData</span>, <span class="hljs-title class_">TParams</span>&gt;(<br>  <span class="hljs-attr">service</span>: <span class="hljs-function">(<span class="hljs-params">...args: TParams</span>) =&gt;</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">TData</span>&gt;,<br>  &#123;<br>    manual?: <span class="hljs-built_in">boolean</span>,<br>    defaultParams?: <span class="hljs-title class_">TParams</span>,<br>    onBefore?: <span class="hljs-function">(<span class="hljs-params">params: TParams</span>) =&gt;</span> <span class="hljs-built_in">void</span>,<br>    onSuccess?: <span class="hljs-function">(<span class="hljs-params">data: TData, params: TParams</span>) =&gt;</span> <span class="hljs-built_in">void</span>,<br>    onError?: <span class="hljs-function">(<span class="hljs-params">e: <span class="hljs-built_in">Error</span>, params: TParams</span>) =&gt;</span> <span class="hljs-built_in">void</span>,<br>    onFinally?: <span class="hljs-function">(<span class="hljs-params">params: TParams, data?: TData, e?: <span class="hljs-built_in">Error</span></span>) =&gt;</span> <span class="hljs-built_in">void</span>,<br>    loadingDelay?: <span class="hljs-built_in">number</span><span class="hljs-comment">//设置 loading 变成 true 的延迟时间</span><br>    pollingInterval?:<span class="hljs-built_in">number</span><span class="hljs-comment">//轮询间隔，单位为毫秒。如果值大于 0，则启动轮询模式。通过 cancel 来停止轮询，通过 run/runAsync 来启动轮询。</span><br>    pollingWhenHidden?:<span class="hljs-built_in">boolean</span><span class="hljs-comment">//在页面隐藏时，是否继续轮询。如果设置为 false，在页面隐藏时会暂时停止轮询，页面重新显示时继续上次轮询。</span><br>    ready?:<span class="hljs-built_in">boolean</span><span class="hljs-comment">//当前请求是否准备好了</span><br>    refreshDeps?:<span class="hljs-built_in">any</span>[]<span class="hljs-comment">//依赖数组，当数组内容变化后，发起请求。同 useEffect 的第二个参数。</span><br>refreshOnWindowFocus?:<span class="hljs-built_in">boolean</span><span class="hljs-comment">//在屏幕重新获取焦点或重新显示时，重新发起请求booleanfalse</span><br>focusTimespan?:<span class="hljs-built_in">number</span><br>debounceWait?:<span class="hljs-built_in">number</span><span class="hljs-comment">//防抖</span><br>    throttleWait?:<span class="hljs-built_in">number</span><span class="hljs-comment">//节流</span><br>  retryCount?:<span class="hljs-built_in">number</span><span class="hljs-comment">//错误重试</span><br>    cacheKey?<span class="hljs-built_in">string</span><span class="hljs-comment">//缓存</span><br>  &#125;<br>);<br></code></pre></td></tr></table></figure><h3 id="useSetState"><a href="#useSetState" class="headerlink" title="useSetState"></a>useSetState</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span><br><span class="hljs-keyword">import</span> &#123; useSetState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;ahooks&quot;</span><br><br>interface <span class="hljs-title class_">State</span> &#123;<br>  <span class="hljs-attr">hello</span>: string;<br>  <span class="hljs-attr">count</span>: number;<br>  [<span class="hljs-attr">key</span>: string]: any;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; &#123;<br>  <span class="hljs-keyword">const</span> [state, setState] =<br>    useSetState &lt;<br>    <span class="hljs-title class_">State</span> &gt;<br>    &#123;<br>      <span class="hljs-attr">hello</span>: <span class="hljs-string">&quot;&quot;</span>,<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>    &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>&#123;JSON.stringify(state, null, 2)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setState(&#123; hello: &quot;world&quot; &#125;)&#125;&gt;</span><br><span class="language-xml">          set hello</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setState(&#123; foo: &quot;bar&quot; &#125;)&#125;</span><br><span class="language-xml">          style=&#123;&#123; margin: &quot;0 8px&quot; &#125;&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          set foo</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setState((prev) =&gt; (&#123; count: prev.count + 1 &#125;))&#125;</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">          count + 1</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="useBoolean"><a href="#useBoolean" class="headerlink" title="useBoolean"></a>useBoolean</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [state, &#123; toggle, set, setLeft, setRight &#125;] = <span class="hljs-title function_">useToggle</span>() <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h3 id="useToggle"><a href="#useToggle" class="headerlink" title="useToggle"></a>useToggle</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [state, &#123; toggle, set, setLeft, setRight &#125;] = <span class="hljs-title function_">useToggle</span>() <span class="hljs-comment">//false</span><br><span class="hljs-keyword">const</span> [state, &#123; toggle, set, setLeft, setRight &#125;] = <span class="hljs-title function_">useToggle</span>(<span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;World&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="LifeCycle"><a href="#LifeCycle" class="headerlink" title="LifeCycle"></a>LifeCycle</h3><ul><li>useMount(fn: () &#x3D;&gt; void );</li><li>useUnmount(fn: () &#x3D;&gt; void);</li><li>useUnmount(fn: () &#x3D;&gt; void);</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>ahooks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>优选文章</title>
    <link href="/blog/2022/03/01/000%E4%BC%98%E9%80%89%E6%96%87%E7%AB%A0/"/>
    <url>/blog/2022/03/01/000%E4%BC%98%E9%80%89%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h2><h3 id="git-使用"><a href="#git-使用" class="headerlink" title="git 使用"></a>git 使用</h3><ul><li><a href="https://www.bookstack.cn/read/git-tutorial/docs-commands-git-reset.md">阮一峰 Git 教程</a></li><li><a href="https://mp.weixin.qq.com/s/2p4m63JdsCjBpVku-WaZyA">45 个 GIT 经典操作场景，专治不会合代码</a></li><li></li></ul><h3 id="es6-使用"><a href="#es6-使用" class="headerlink" title="es6 使用"></a>es6 使用</h3><ul><li><a href="https://es6.ruanyifeng.com/">ES6 入门教程</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>rtd样式</title>
    <link href="/blog/2022/03/01/%E5%B7%A5%E4%BD%9C/"/>
    <url>/blog/2022/03/01/%E5%B7%A5%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>（二）公积金缴存比例是多少？</p><p>公积金缴存比例5%-12%，由单位选择。</p>]]></content>
    
    
    
    <tags>
      
      <tag>工作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rtd样式</title>
    <link href="/blog/2022/03/01/%E6%A0%B7%E5%BC%8F/"/>
    <url>/blog/2022/03/01/%E6%A0%B7%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><ul><li><p>m 是 margin 缩写，</p></li><li><p>p 是 padding 缩写，.rtd-p-h-24 -&gt; padding-right: 24px; padding-left: 24px;</p></li><li><p>t r b l 是 top right bottom left 缩写，</p></li><li><p>h 是 horizontal 缩写（margin-right: 24px; margin-left: 24px;）</p></li><li><p>v 是 vertical 缩写（margin-top: 24px; margin-bottom: 24px)</p></li><li><p>n 是 negative（负值，比如 -8px）缩写</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.rtd-p-h-24</span> -&gt; <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">24px</span>; <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">24px</span>;<br><span class="hljs-selector-class">.rtd-m-r-24</span> -&gt; <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">24px</span>;<br><span class="hljs-selector-class">.rtd-m-t-24</span> -&gt; <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">24px</span>;<br><br></code></pre></td></tr></table></figure><script src="https://utteranc.es/client.js"        repo="Gao-Hongxiang/Gao-Hongxiang.github.io"        issue-term="pathname"        theme="github-light"        crossorigin="anonymous"        async></script>]]></content>
    
    
    
    <tags>
      
      <tag>工作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法+手撕</title>
    <link href="/blog/2022/03/01/%E7%AE%97%E6%B3%95%E6%89%8B%E6%92%95/"/>
    <url>/blog/2022/03/01/%E7%AE%97%E6%B3%95%E6%89%8B%E6%92%95/</url>
    
    <content type="html"><![CDATA[<h2 id="手撕"><a href="#手撕" class="headerlink" title="手撕"></a>手撕</h2><h3 id="节流-防抖"><a href="#节流-防抖" class="headerlink" title="节流-防抖"></a><strong>节流-防抖</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">throttle1</span> = (<span class="hljs-params">fn,wait = <span class="hljs-number">500</span></span>) =&gt; &#123; <span class="hljs-comment">//必须返回函数否则是函数的直接调用</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;  <span class="hljs-comment">// 不能是箭头函数，让this指向该标签，否则this指向windiw</span><br>          <span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span>)&#123;<span class="hljs-comment">//检测是否开启了定时器</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> =  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-comment">//没有开启则开启新的定时器，必须是箭头函数，否则this指向windiw</span><br>              fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,args) <span class="hljs-comment">//fn必须是普通函数，否则没法改变this指向</span><br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> = <span class="hljs-literal">null</span><span class="hljs-comment">//清除定时器</span><br>            &#125;,wait)<br>          &#125;<br>        &#125;<br>     &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> <span class="hljs-title function_">debounce</span> = (<span class="hljs-params">func, wait = <span class="hljs-number">50</span></span>) =&gt; &#123;<br>  <span class="hljs-comment">// 缓存一个定时器id</span><br>  <span class="hljs-comment">// 这里返回的函数是每次用户实际调用的防抖函数</span><br>  <span class="hljs-comment">// 如果已经设定过定时器了就清空上一次的定时器</span><br>  <span class="hljs-comment">// 开始一个新的定时器，延迟执行用户传入的方法</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span>) <span class="hljs-built_in">clearTimeout</span>(timer)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      func.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>    &#125;, wait)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call-apply-bind"></a>call-apply-bind</h3><p>1.call</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myCall</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context = <span class="hljs-variable language_">window</span>, ...args</span>) &#123;<br>  <span class="hljs-comment">// this--&gt;func  context--&gt; obj  args--&gt; 传递过来的参数</span><br><br>  <span class="hljs-comment">// 在context上加一个唯一值不影响context上的属性</span><br>  <span class="hljs-keyword">let</span> key = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;key&quot;</span>)<br>  context[key] = <span class="hljs-variable language_">this</span> <span class="hljs-comment">// context为调用的上下文,this此处为函数，将这个函数作为context的方法</span><br>  <span class="hljs-comment">// let args = [...arguments].slice(1)   //第一个参数为obj所以删除,伪数组转为数组</span><br><br>  <span class="hljs-keyword">let</span> result = context[key](...args)<br>  <span class="hljs-keyword">delete</span> context[key] <span class="hljs-comment">// 不删除会导致context属性越来越多</span><br>  <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><p>2.apply</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myApply</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context = <span class="hljs-variable language_">window</span>, args</span>) &#123;<br>  <span class="hljs-comment">// this--&gt;func  context--&gt; obj  args--&gt; 传递过来的参数</span><br><br>  <span class="hljs-comment">// 在context上加一个唯一值不影响context上的属性</span><br>  <span class="hljs-keyword">let</span> key = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;key&quot;</span>)<br>  context[key] = <span class="hljs-variable language_">this</span> <span class="hljs-comment">// context为调用的上下文,this此处为函数，将这个函数作为context的方法</span><br>  <span class="hljs-keyword">let</span> result = context[key](...args) <span class="hljs-comment">// 这里和call传参不一样</span><br>  <span class="hljs-keyword">delete</span> context[key] <span class="hljs-comment">// 不删除会导致context属性越来越多</span><br>  <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><p>3.bind</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myBind</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context = <span class="hljs-variable language_">window</span>, ...args</span>) &#123;<br>  <span class="hljs-keyword">const</span> temp = <span class="hljs-variable language_">this</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params">...args2</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> F) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">temp</span>(...args, args2)<br>    &#125;<br>    temp.<span class="hljs-title function_">myCall</span>(context, ...args, ...args2)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPromise</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">resolvedCallbacks</span> = []<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">rejectedCallbacks</span> = []<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = <span class="hljs-string">&quot;PENDING&quot;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-title function_">fn</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">resolve</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>), <span class="hljs-variable language_">this</span>.<span class="hljs-property">reject</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>))<br>  &#125;<br><br>  <span class="hljs-title function_">resolve</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> === <span class="hljs-string">&quot;PENDING&quot;</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = <span class="hljs-string">&quot;RESOLVED&quot;</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value<br><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">resolvedCallbacks</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">cb</span>) =&gt;</span> <span class="hljs-title function_">cb</span>(value))<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">reject</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> === <span class="hljs-string">&quot;PENDING&quot;</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = <span class="hljs-string">&quot;REJECTED&quot;</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value<br><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">rejectedCallbacks</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">cb</span>) =&gt;</span> <span class="hljs-title function_">cb</span>(value))<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">then</span>(<span class="hljs-params">onFulfilled, onRejected</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> === <span class="hljs-string">&quot;PENDING&quot;</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">resolvedCallbacks</span>.<span class="hljs-title function_">push</span>(onFulfilled)<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">rejectedCallbacks</span>.<span class="hljs-title function_">push</span>(onRejected)<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> === <span class="hljs-string">&quot;RESOLVED&quot;</span>) &#123;<br>      <span class="hljs-title function_">onFulfilled</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> === <span class="hljs-string">&quot;REJECTED&quot;</span>) &#123;<br>      <span class="hljs-title function_">onRejected</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>异步函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">time</span> = (<span class="hljs-params">timer</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>()<br>    &#125;, timer)<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">ajax1</span> = (<span class="hljs-params"></span>) =&gt;<br>  <span class="hljs-title function_">time</span>(<span class="hljs-number">2000</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  &#125;)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">ajax2</span> = (<span class="hljs-params"></span>) =&gt;<br>  <span class="hljs-title function_">time</span>(<span class="hljs-number">3000</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>  &#125;)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">ajax3</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">time</span>(<span class="hljs-number">1000</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Promise</span>.<span class="hljs-property">all</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">promises</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> result = []<br>    <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> len = promises.<span class="hljs-property">length</span><br>    <span class="hljs-keyword">if</span> (len === <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-title function_">resolve</span>(result)<br>      <span class="hljs-keyword">return</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>      <span class="hljs-comment">// 为什么不直接 promise[i].then, 因为promise[i]可能不是一个promise</span><br>      <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(promise[i])<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>          result[i] = data<br>          index++<br>          <span class="hljs-keyword">if</span> (index === len) <span class="hljs-title function_">resolve</span>(result)<br>        &#125;)<br>        .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>          <span class="hljs-title function_">reject</span>(err)<br>        &#125;)<br>    &#125;<br>  &#125;)<br>&#125;<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all1</span>([<span class="hljs-title function_">ajax1</span>(), <span class="hljs-title function_">ajax2</span>(), <span class="hljs-title function_">ajax3</span>()]).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="有顺序的执行-promose"><a href="#有顺序的执行-promose" class="headerlink" title="有顺序的执行 promose"></a>有顺序的执行 promose</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">mergePromise</span>(<span class="hljs-params">ajaxArr</span>) &#123;<br>  <span class="hljs-keyword">const</span> data = [] <span class="hljs-comment">//存放返回结果</span><br>  <span class="hljs-keyword">let</span> promise = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>()<br>  ajaxArr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">ajax</span>) =&gt;</span> &#123;<br>    promise = promise.<span class="hljs-title function_">then</span>(ajax).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      data.<span class="hljs-title function_">push</span>(res)<br>      <span class="hljs-keyword">return</span> data<br>    &#125;)<br>  &#125;)<br>  <span class="hljs-keyword">return</span> promise<br>&#125;<br><span class="hljs-title function_">mergePromise</span>([ajax1, ajax2, ajax3]).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="限制并发"><a href="#限制并发" class="headerlink" title="限制并发"></a><strong>限制并发</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">limitLoad</span>(<span class="hljs-params">url, handler, limit</span>) &#123;<br>  <span class="hljs-keyword">let</span> sequence = [...url]<br>  <span class="hljs-comment">//初始化promise容器</span><br>  <span class="hljs-keyword">let</span> promises = sequence.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, limit).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">url, index</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">handler</span>(url).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> index<br>    &#125;)<br>  &#125;)<br>  <span class="hljs-keyword">return</span> sequence<br>    .<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pCollect, url</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> pCollect<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>(promises) <span class="hljs-comment">//返回已经完成的下标</span><br>        &#125;)<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">fastestIndex</span>) =&gt;</span> &#123;<br>          promises[fastestIndex] = <span class="hljs-title function_">handler</span>(url).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> fastestIndex<br>          &#125;)<br>        &#125;)<br>        .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>        &#125;)<br>    &#125;, <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>())<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(promises)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="模拟红绿的灯"><a href="#模拟红绿的灯" class="headerlink" title="模拟红绿的灯"></a><strong>模拟红绿的灯</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">ajax1</span>()<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">ajax2</span>()<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">ajax3</span>()<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">fn</span>()<br>    &#125;<br><br>-----------------------------------------------------<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>().<span class="hljs-title function_">then</span>(ajax1).<span class="hljs-title function_">then</span>(ajax2).<span class="hljs-title function_">then</span>(ajax3).<span class="hljs-title function_">then</span>(fn)<br>    &#125;<br>  <span class="hljs-title function_">fn</span>()<br></code></pre></td></tr></table></figure><h3 id="eventBus"><a href="#eventBus" class="headerlink" title="eventBus"></a><strong>eventBus</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EventBus</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_events</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br>  &#125;<br>  <span class="hljs-title function_">on</span>(<span class="hljs-params">type, fn</span>) &#123;<br>    <span class="hljs-keyword">const</span> handler = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_events</span>.<span class="hljs-title function_">get</span>(type)<br>    <span class="hljs-keyword">if</span> (!handler) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">_events</span>.<span class="hljs-title function_">set</span>(type, [fn])<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      handler.<span class="hljs-title function_">push</span>(fn)<br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">emit</span>(<span class="hljs-params">type, ...args</span>) &#123;<br>    <span class="hljs-keyword">let</span> handler = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_events</span>.<span class="hljs-title function_">get</span>(type)<br>    <span class="hljs-keyword">if</span> (handler) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> fn <span class="hljs-keyword">of</span> handler) &#123;<br>        fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">off</span>(<span class="hljs-params">type, fn</span>) &#123;<br>    <span class="hljs-keyword">const</span> handler = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_events</span>.<span class="hljs-title function_">get</span>(type)<br>    <span class="hljs-keyword">const</span> index = handler.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> e === fn)<br>    <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span>) &#123;<br>      handler.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (handler.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">_events</span>.<span class="hljs-title function_">delete</span>(type)<br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">once</span>(<span class="hljs-params">type, fn</span>) &#123;<br>    <span class="hljs-keyword">let</span> _self = <span class="hljs-variable language_">this</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">handler</span>(<span class="hljs-params"></span>) &#123;<br>      fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>      _self.<span class="hljs-title function_">off</span>(type, handler)<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">on</span>(type, handler)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 下面是 测试代码</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test1</span>(<span class="hljs-params">...params</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">11</span>, params)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test2</span>(<span class="hljs-params">...params</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">22</span>, params)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test3</span>(<span class="hljs-params">...params</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">33</span>, params)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test4</span>(<span class="hljs-params">...params</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">33</span>, params)<br>&#125;<br><br><span class="hljs-comment">//测试用例</span><br><span class="hljs-keyword">let</span> eb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventBus</span>()<br>eb.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;event1&quot;</span>, test1)<br>eb.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;event1&quot;</span>, test2)<br>eb.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;event1&quot;</span>, test3)<br>eb.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;event1&quot;</span>, <span class="hljs-string">&quot;第一次&quot;</span>)<br><br>eb.<span class="hljs-title function_">off</span>(<span class="hljs-string">&quot;event1&quot;</span>, test1)<br>eb.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;event1&quot;</span>, [<span class="hljs-string">&quot;第二次1&quot;</span>, <span class="hljs-string">&quot;第二次2&quot;</span>])<br><br>eb.<span class="hljs-title function_">once</span>(<span class="hljs-string">&quot;once&quot;</span>, test4)<br>eb.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;once&quot;</span>, <span class="hljs-string">&quot;执行一次&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>eb.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;once&quot;</span>, <span class="hljs-number">134</span>)<br></code></pre></td></tr></table></figure><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="伪数组转换"><a href="#伪数组转换" class="headerlink" title="伪数组转换"></a><strong>伪数组转换</strong></h3><blockquote><p><strong>什么是伪数组</strong></p></blockquote><p>本身并不能调用数组方法，它是一个另外一种对象类型，只不过属性从 0 开始排，依次为 0，1，2…最后还<strong>有 callee 和 length 属性</strong>。我们也把这样的对象称为类数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [..<span class="hljs-property">arguments</span>]<br><span class="hljs-keyword">let</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>);<span class="hljs-comment">//(start,end)</span><br><span class="hljs-keyword">let</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">arguments</span>);<br><span class="hljs-keyword">let</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">concat</span>.<span class="hljs-title function_">apply</span>([], <span class="hljs-variable language_">arguments</span>);<br></code></pre></td></tr></table></figure><h3 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h3><ol><li>for 循环遍历判断是否数组 是的递归调用 <strong>concat 递归调用</strong>该数组 否则 push 新数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]]]<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flatten</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">let</span> result = []<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr[i])) &#123;<br>      result = result.<span class="hljs-title function_">concat</span>(<span class="hljs-title function_">flatten</span>(arr[i]))<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      result.<span class="hljs-title function_">push</span>(arr[i])<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br><span class="hljs-title function_">flatten</span>(a) <span class="hljs-comment">//  [1, 2, 3, 4，5]</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>利用 reduce 方法 +concat</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 方法2</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]]]<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flatten</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">prev, next</span>) &#123;<br>    <span class="hljs-keyword">return</span> prev.<span class="hljs-title function_">concat</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(next) ? <span class="hljs-title function_">flatten</span>(next) : next)<br>  &#125;, [])<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">flatten</span>(arr)) <span class="hljs-comment">//  [1, 2, 3, 4，5]</span><br></code></pre></td></tr></table></figure></li><li><p><strong>some+[…]</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 方法3</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]]]<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flatten</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">while</span> (arr.<span class="hljs-title function_">some</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(item))) &#123;<br>    arr = [].<span class="hljs-title function_">concat</span>(...arr)<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">flatten</span>(arr)) <span class="hljs-comment">//  [1, 2, 3, 4，5]</span><br></code></pre></td></tr></table></figure><ol start="4"><li><p>arr.toString().split(‘,’);</p></li><li><p>arr.flat([depth])</p></li><li><p>正则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 方法 6</span><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, [<span class="hljs-string">&quot;2&quot;</span>, [<span class="hljs-number">3</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]]], <span class="hljs-number">6</span>]<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flatten</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">let</span> str = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(arr) <span class="hljs-comment">//[1,[&quot;2&quot;,[3,[4,5]]],6]</span><br>  str = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(\[|\])/g</span>, <span class="hljs-string">&quot;&quot;</span>)<br>  str = <span class="hljs-string">&quot;[&quot;</span> + str + <span class="hljs-string">&quot;]&quot;</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(str)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">flatten</span>(arr)) <span class="hljs-comment">//  [1, 2, 3, 4，5]</span><br></code></pre></td></tr></table></figure></li></ol></li></ol><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><ol><li><p><strong>JSON.parse</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> newObj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(oldObj))<br></code></pre></td></tr></table></figure><p><strong>局限性：</strong></p><ul><li><p>会忽略 undefined</p></li><li><p>不能序列化函数</p></li><li><p>不能解决循环引用的对象</p></li><li><p>他无法实现对函数 、RegExp 等特殊对象的克隆</p></li><li><p>会抛弃对象的 constructor,所有的构造函数会指向 Object</p></li><li><p>对象有循环引用,会报错</p></li></ul></li><li><p><strong>（递归）</strong></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepClone</span>(<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-comment">// 如果是 值类型 或 null，则直接return</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj !== <span class="hljs-string">&quot;object&quot;</span> || obj === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> obj<br>  &#125;<br>  <span class="hljs-keyword">let</span> copy = &#123;&#125;<br>  <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Array</span>) &#123;<br>    copy = []<br>  &#125;<br>  <span class="hljs-comment">// 遍历对象的key</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-comment">// 如果key是对象的自有属性</span><br>    <span class="hljs-keyword">if</span> (obj.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;<br>      <span class="hljs-comment">// 递归调用深拷贝方法</span><br>      copy[key] = <span class="hljs-title function_">deepClone</span>(obj[key])<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> copy<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><ol><li><p>new Set（）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">;[...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr)]<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr))<br></code></pre></td></tr></table></figure></li></ol><blockquote><p><strong>对象数组不能去重</strong></p></blockquote><ol start="2"><li><p><strong>indexOf</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">var</span> array = []<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (array.<span class="hljs-title function_">indexOf</span>(arr[i]) === -<span class="hljs-number">1</span>) &#123;<br>      array.<span class="hljs-title function_">push</span>(arr[i])<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> array<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>对象数组 NaN 不能去重</strong></p></blockquote></li><li><p>new Map()</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">let</span> result = []<br>  <span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br>  arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!map.<span class="hljs-title function_">has</span>(item)) &#123;<br>      result.<span class="hljs-title function_">push</span>(item)<br>      map.<span class="hljs-title function_">set</span>(item, <span class="hljs-literal">true</span>)<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li><strong>hasOwnProperty</strong></li></ol><p>简单版本</p><blockquote><p>只保留一个对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">typeof</span> [<span class="hljs-number">1</span>]+[<span class="hljs-number">1</span>]  object1<br>  <span class="hljs-keyword">typeof</span> &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;+&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;  object[object <span class="hljs-title class_">Object</span>]<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>)&#123;<br>        <span class="hljs-keyword">let</span> result = []<br>        <span class="hljs-keyword">let</span> obj = &#123;&#125;<br>        arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span>(!obj.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-keyword">typeof</span> item+item))&#123;<br>            result.<span class="hljs-title function_">push</span>(item)<br>            obj[<span class="hljs-keyword">typeof</span> item+item] = <span class="hljs-literal">true</span><br>          &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> result<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>完整版本</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">let</span> result = []<br>  <span class="hljs-keyword">let</span> obj = &#123;&#125;<br>  arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(item) === <span class="hljs-string">&quot;[object Object]&quot;</span>) &#123;<br>      <span class="hljs-comment">// console.log(item);</span><br>      <span class="hljs-comment">// console.log(JSON.stringify(item));</span><br>      <span class="hljs-keyword">if</span> (!obj.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(item))) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(item))<br>        result.<span class="hljs-title function_">push</span>(item)<br>        obj[<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(item)] = <span class="hljs-literal">true</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<br>      !obj.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-keyword">typeof</span> item + item) &amp;&amp;<br>      <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(item) !== <span class="hljs-string">&quot;[object Object]&quot;</span><br>    ) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a&quot;</span>, item)<br>      result.<span class="hljs-title function_">push</span>(item)<br>      obj[<span class="hljs-keyword">typeof</span> item + item] = <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a><strong>排序</strong></h3><ol><li><p>冒泡</p><blockquote><p>每一轮操作，都会将这一轮中最大的元素放置到数组的末尾</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bubbleSort</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-comment">// 缓存数组长度</span><br>  <span class="hljs-keyword">const</span> len = arr.<span class="hljs-property">length</span><br>  <span class="hljs-comment">// 外层循环用于控制从头到尾的比较+交换到底有多少轮</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    <span class="hljs-comment">// 区别在这里，我们加了一个标志位</span><br>    <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">false</span><br>    <span class="hljs-comment">// 内层循环用于完成每一轮遍历过程中的重复比较+交换</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; len - <span class="hljs-number">1</span> - i; j++) &#123;<br>      <span class="hljs-comment">// 若相邻元素前面的数比后面的大</span><br>      <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>        <span class="hljs-comment">// 交换两者</span><br>        ;[arr[j], arr[j + <span class="hljs-number">1</span>]] = [arr[j + <span class="hljs-number">1</span>], arr[j]]<br>        flag = <span class="hljs-literal">true</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 若一次交换也没发生，则说明数组有序，直接放过</span><br>    <span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">false</span>) <span class="hljs-keyword">return</span> arr<br>  &#125;<br>  <span class="hljs-comment">// 返回数组</span><br>  <span class="hljs-keyword">return</span> arr<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>选择排序</strong></p><blockquote><p>每次都找出当前范围内的最小值，把它放在当前范围的头部</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">selectSort</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-comment">// 缓存数组长度</span><br>  <span class="hljs-keyword">const</span> len = arr.<span class="hljs-property">length</span><br>  <span class="hljs-comment">// 定义 minIndex，缓存当前区间最小值的索引，注意是索引</span><br>  <span class="hljs-keyword">let</span> minIndex<br>  <span class="hljs-comment">// i 是当前排序区间的起点</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-comment">// 初始化 minIndex 为当前区间第一个元素</span><br>    minIndex = i<br>    <span class="hljs-comment">// i、j分别定义当前区间的上下界，i是左边界，j是右边界</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i; j &lt; len; j++) &#123;<br>      <span class="hljs-comment">// 若 j 处的数据项比当前最小值还要小，则更新最小值索引为 j</span><br>      <span class="hljs-keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;<br>        minIndex = j<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 如果 minIndex 对应元素不是目前的头部元素，则交换两者</span><br>    <span class="hljs-keyword">if</span> (minIndex !== i) &#123;<br>      ;[arr[i], arr[minIndex]] = [arr[minIndex], arr[i]]<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>插入排序</strong></p><blockquote><p>找到元素在它前面那个序列中的正确位置</p></blockquote></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">insertSort</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-comment">// 缓存数组长度</span><br>  <span class="hljs-keyword">const</span> len = arr.<span class="hljs-property">length</span><br>  <span class="hljs-comment">// temp 用来保存当前需要插入的元素</span><br>  <span class="hljs-keyword">let</span> temp<br>  <span class="hljs-comment">// i用于标识每次被插入的元素的索引</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; len; i++) &#123;<br>    <span class="hljs-comment">// j用于帮助 temp 寻找自己应该有的定位</span><br>    <span class="hljs-keyword">let</span> j = i<br>    temp = arr[i]<br>    <span class="hljs-comment">// 判断 j 前面一个元素是否比 temp 大</span><br>    <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; arr[j - <span class="hljs-number">1</span>] &gt; temp) &#123;<br>      <span class="hljs-comment">// 如果是，则将 j 前面的一个元素后移一位，为 temp 让出位置</span><br>      arr[j] = arr[j - <span class="hljs-number">1</span>]<br>      j--<br>    &#125;<br>    <span class="hljs-comment">// 循环让位，最后得到的 j 就是 temp 的正确索引</span><br>    arr[j] = temp<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><blockquote><p>归并排序是对分治思想的典型应用，它按照如下的思路对分治思想“三步走”的框架进行了填充：</p></blockquote><ul><li>分解子问题：将需要被排序的数组从中间分割为两半，然后再将分割出来的每个子数组各分割为两半，重复以上操作，直到单个子数组只有一个元素为止。</li><li>求解每个子问题：从粒度最小的子数组开始，两两合并、确保每次合并出来的数组都是有序的。（这里的“子问题”指的就是对每个子数组进行排序）。 合并子问题的解，得出大问题的解：当数组被合并至原有的规模时，就得到了一个完全排序的数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">mergeSort</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">const</span> len = arr.<span class="hljs-property">length</span><br>  <span class="hljs-comment">// 处理边界情况</span><br>  <span class="hljs-keyword">if</span> (len &lt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> arr<br>  &#125;<br>  <span class="hljs-comment">// 计算分割点</span><br>  <span class="hljs-keyword">const</span> mid = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(len / <span class="hljs-number">2</span>)<br>  <span class="hljs-comment">// 递归分割左子数组，然后合并为有序数组</span><br>  <span class="hljs-keyword">const</span> leftArr = <span class="hljs-title function_">mergeSort</span>(arr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, mid))<br>  <span class="hljs-comment">// 递归分割右子数组，然后合并为有序数组</span><br>  <span class="hljs-keyword">const</span> rightArr = <span class="hljs-title function_">mergeSort</span>(arr.<span class="hljs-title function_">slice</span>(mid, len))<br>  <span class="hljs-comment">// 合并左右两个有序数组</span><br>  arr = <span class="hljs-title function_">mergeArr</span>(leftArr, rightArr)<br>  <span class="hljs-comment">// 返回合并后的结果</span><br>  <span class="hljs-keyword">return</span> arr<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">mergeArr</span>(<span class="hljs-params">arr1, arr2</span>) &#123;<br>  <span class="hljs-comment">// 初始化两个指针，分别指向 arr1 和 arr2</span><br>  <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>,<br>    j = <span class="hljs-number">0</span><br>  <span class="hljs-comment">// 初始化结果数组</span><br>  <span class="hljs-keyword">const</span> res = []<br>  <span class="hljs-comment">// 缓存arr1的长度</span><br>  <span class="hljs-keyword">const</span> len1 = arr1.<span class="hljs-property">length</span><br>  <span class="hljs-comment">// 缓存arr2的长度</span><br>  <span class="hljs-keyword">const</span> len2 = arr2.<span class="hljs-property">length</span><br>  <span class="hljs-comment">// 合并两个子数组</span><br>  <span class="hljs-keyword">while</span> (i &lt; len1 &amp;&amp; j &lt; len2) &#123;<br>    <span class="hljs-keyword">if</span> (arr1[i] &lt; arr2[j]) &#123;<br>      res.<span class="hljs-title function_">push</span>(arr1[i])<br>      i++<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      res.<span class="hljs-title function_">push</span>(arr2[j])<br>      j++<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 若其中一个子数组首先被合并完全，则直接拼接另一个子数组的剩余部分</span><br>  <span class="hljs-keyword">if</span> (i &lt; len1) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">concat</span>(arr1.<span class="hljs-title function_">slice</span>(i))<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">concat</span>(arr2.<span class="hljs-title function_">slice</span>(j))<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">partition</span>(<span class="hljs-params">arr, left = <span class="hljs-number">0</span>, right = arr.length - <span class="hljs-number">1</span></span>) &#123;<br>  <span class="hljs-keyword">if</span> (arr.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> arr<br>  &#125;<br>  <span class="hljs-keyword">if</span> (left &gt; right) &#123;<br>    <span class="hljs-keyword">return</span><br>  &#125;<br><br>  <span class="hljs-keyword">let</span> value = arr[left]<br>  <span class="hljs-keyword">let</span> i = left,<br>    j = right<br>  <span class="hljs-keyword">while</span> (i !== j) &#123;<br>    <span class="hljs-keyword">while</span> (arr[j] &gt;= value &amp;&amp; j &gt; i) &#123;<br>      j--<br>    &#125;<br>    <span class="hljs-keyword">while</span> (arr[i] &lt;= value &amp;&amp; i &lt; j) &#123;<br>      i++<br>    &#125;<br>    <span class="hljs-keyword">if</span> (i &lt; j) &#123;<br>      ;[arr[i], arr[j]] = [arr[j], arr[i]]<br>    &#125;<br>  &#125;<br>  ;[arr[i], arr[left]] = [arr[left], arr[i]]<br>  <span class="hljs-title function_">partition</span>(arr, left, i - <span class="hljs-number">1</span>)<br>  <span class="hljs-title function_">partition</span>(arr, i + <span class="hljs-number">1</span>, right)<br>  <span class="hljs-keyword">return</span> arr<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><br></code></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="转化为驼峰命名"><a href="#转化为驼峰命名" class="headerlink" title="转化为驼峰命名"></a><strong>转化为驼峰命名</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s1 = <span class="hljs-string">&quot;get-element-by-id&quot;</span><br><br><span class="hljs-comment">// 转化为 getElementById</span><br><br><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">return</span> s.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/-\w/g</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">return</span> x.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">toUpperCase</span>()<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="判断是否是回文串"><a href="#判断是否是回文串" class="headerlink" title="判断是否是回文串"></a>判断是否是回文串</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">str ==== str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>----------------------<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isPalindrome</span>(<span class="hljs-params">str</span>) &#123;<br>    <span class="hljs-comment">// 缓存字符串的长度</span><br>    <span class="hljs-keyword">const</span> len = str.<span class="hljs-property">length</span><br>    <span class="hljs-comment">// 遍历前半部分，判断和后半部分是否对称</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;len/<span class="hljs-number">2</span>;i++) &#123;<br>        <span class="hljs-keyword">if</span>(str[i]!==str[len-i-<span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>--------------------<br> <span class="hljs-comment">// 工具方法，用于判断字符串是否回文</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">isPalindrome</span>(<span class="hljs-params">st, ed</span>) &#123;<br>        <span class="hljs-keyword">while</span>(st&lt;ed) &#123;<br>            <span class="hljs-keyword">if</span>(s[st] !== s[ed]) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br>            st++<br>            ed--<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="删除一个是否回文"><a href="#删除一个是否回文" class="headerlink" title="删除一个是否回文"></a>删除一个是否回文</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> validPalindrome = <span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-comment">// 缓存字符串的长度</span><br>  <span class="hljs-keyword">const</span> len = s.<span class="hljs-property">length</span><br><br>  <span class="hljs-comment">// i、j分别为左右指针</span><br>  <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>,<br>    j = len - <span class="hljs-number">1</span><br><br>  <span class="hljs-comment">// 当左右指针均满足对称时，一起向中间前进</span><br>  <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; s[i] === s[j]) &#123;<br>    i++<br>    j--<br>  &#125;<br><br>  <span class="hljs-comment">// 尝试判断跳过左指针元素后字符串是否回文</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isPalindrome</span>(i + <span class="hljs-number">1</span>, j)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125;<br>  <span class="hljs-comment">// 尝试判断跳过右指针元素后字符串是否回文</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isPalindrome</span>(i, j - <span class="hljs-number">1</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125;<br><br>  <span class="hljs-comment">// 工具方法，用于判断字符串是否回文</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">isPalindrome</span>(<span class="hljs-params">st, ed</span>) &#123;<br>    <span class="hljs-keyword">while</span> (st &lt; ed) &#123;<br>      <span class="hljs-keyword">if</span> (s[st] !== s[ed]) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>      &#125;<br>      st++<br>      ed--<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125;<br><br>  <span class="hljs-comment">// 默认返回 false</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a><strong>无重复字符的最长子串</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> lengthOfLongestSubstring = <span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>() <span class="hljs-comment">//判断滑动窗口内是否有重复元素</span><br>  <span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>, <span class="hljs-comment">//滑动窗口左边界</span><br>    maxLength = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">if</span> (s.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">//极端情况</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-comment">//滑动窗口右边界</span><br>    <span class="hljs-keyword">if</span> (!set.<span class="hljs-title function_">has</span>(s[i])) &#123;<br>      <span class="hljs-comment">//当前元素不在set中 就加入set 然后更新最大长度，i++继续下一轮循环</span><br>      set.<span class="hljs-title function_">add</span>(s[i])<br>      maxLength = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(maxLength, set.<span class="hljs-property">size</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">//set中有重复元素不断让j++ 并删除窗口之外的元素 直到滑动窗口内没有重复的元素</span><br>      <span class="hljs-keyword">while</span> (set.<span class="hljs-title function_">has</span>(s[i])) &#123;<br>        set.<span class="hljs-title function_">delete</span>(s[j])<br>        j++<br>      &#125;<br>      set.<span class="hljs-title function_">add</span>(s[i]) <span class="hljs-comment">//放心将s[i]加入set中</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> maxLength<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a><strong>最长回文子串</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> longestPalindrome = <span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">if</span> (s.<span class="hljs-property">length</span> &lt; <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-keyword">return</span> s<br>  &#125;<br>  <span class="hljs-keyword">let</span> l = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">let</span> r = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-comment">// 回文子串长度是奇数</span><br>    <span class="hljs-title function_">helper</span>(i, i)<br>    <span class="hljs-comment">// 回文子串长度是偶数</span><br>    <span class="hljs-title function_">helper</span>(i, i + <span class="hljs-number">1</span>)<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">helper</span>(<span class="hljs-params">m, n</span>) &#123;<br>    <span class="hljs-keyword">while</span> (m &gt;= <span class="hljs-number">0</span> &amp;&amp; n &lt; s.<span class="hljs-property">length</span> &amp;&amp; s[m] == s[n]) &#123;<br>      m--<br>      n++<br>    &#125;<br>    <span class="hljs-comment">// 注意此处m,n的值循环完后  是恰好不满足循环条件的时刻 如果此轮询得到回文串长度大于之前记录， 记录此轮循边界</span><br>    <span class="hljs-keyword">if</span> (n - m - <span class="hljs-number">1</span> &gt; r - l - <span class="hljs-number">1</span>) &#123;<br>      r = n<br>      l = m<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> s.<span class="hljs-title function_">slice</span>(l + <span class="hljs-number">1</span>, r)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="最长上升子序列模型"><a href="#最长上升子序列模型" class="headerlink" title="最长上升子序列模型"></a><strong>最长上升子序列模型</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 入参是一个数字序列</span><br><span class="hljs-keyword">const</span> lengthOfLIS = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) &#123;<br>  <span class="hljs-comment">// 缓存序列的长度</span><br>  <span class="hljs-keyword">const</span> len = nums.<span class="hljs-property">length</span><br>  <span class="hljs-comment">// 处理边界条件</span><br>  <span class="hljs-keyword">if</span> (!len) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>  &#125;<br>  <span class="hljs-comment">// 初始化数组里面每一个索引位的状态值</span><br>  <span class="hljs-keyword">const</span> dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(len).<span class="hljs-title function_">fill</span>(<span class="hljs-number">1</span>)<br>  <span class="hljs-comment">// 初始化最大上升子序列的长度为1</span><br>  <span class="hljs-keyword">let</span> maxLen = <span class="hljs-number">1</span><br>  <span class="hljs-comment">// 从第2个元素开始，遍历整个数组</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; len; i++) &#123;<br>    <span class="hljs-comment">// 每遍历一个新元素，都要“回头看”，看看能不能延长原有的上升子序列</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>      <span class="hljs-comment">// 若遇到了一个比当前元素小的值，则意味着遇到了一个可以延长的上升子序列，故更新当前元素索引位对应的状态</span><br>      <span class="hljs-keyword">if</span> (nums[j] &lt; nums[i]) &#123;<br>        dp[i] = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(dp[i], dp[j] + <span class="hljs-number">1</span>)<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 及时更新上升子序列长度的最大值</span><br>    <span class="hljs-keyword">if</span> (dp[i] &gt; maxLen) &#123;<br>      maxLen = dp[i]<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 遍历完毕，最后到手的就是最大上升子序列的长度</span><br>  <span class="hljs-keyword">return</span> maxLen<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><blockquote><p>创建</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">7</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：fill([])后面传递的是引用数据类型</p><h4 id="两数求和问题"><a href="#两数求和问题" class="headerlink" title="两数求和问题"></a><strong>两数求和问题</strong></h4><p>哈希表 map</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> twoSum = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums, target</span>) &#123;<br>  <span class="hljs-comment">// 这里我用对象来模拟 map 的能力</span><br>  <span class="hljs-keyword">const</span> map = &#123;&#125;<br>  <span class="hljs-comment">// 缓存数组长度</span><br>  <span class="hljs-keyword">const</span> len = nums.<span class="hljs-property">length</span><br>  <span class="hljs-comment">// 遍历数组</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    <span class="hljs-comment">// 判断当前值对应的 target 差值是否存在（是否已遍历过）</span><br>    <span class="hljs-keyword">if</span> (map[target - nums[i]]) &#123;<br>      <span class="hljs-comment">// 若有对应差值，那么答案get！</span><br>      <span class="hljs-keyword">return</span> [map[target - nums[i]], i]<br>    &#125;<br>    <span class="hljs-comment">// 若没有对应差值，则记录当前值</span><br>    map[nums[i]] = i<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="合并升序数组"><a href="#合并升序数组" class="headerlink" title="合并升序数组"></a>合并升序数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> merge = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums1, m, nums2, n</span>) &#123;<br>  <span class="hljs-comment">// 初始化两个指针的指向，初始化 nums1 尾部索引k</span><br>  <span class="hljs-keyword">let</span> i = m - <span class="hljs-number">1</span>,<br>    j = n - <span class="hljs-number">1</span>,<br>    k = m + n - <span class="hljs-number">1</span><br>  <span class="hljs-comment">// 当两个数组都没遍历完时，指针同步移动</span><br>  <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &gt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 取较大的值，从末尾往前填补</span><br>    <span class="hljs-keyword">if</span> (nums1[i] &gt;= nums2[j]) &#123;<br>      nums1[k] = nums1[i]<br>      i--<br>      k--<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      nums1[k] = nums2[j]<br>      j--<br>      k--<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// nums2 留下的情况，特殊处理一下</span><br>  <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span>) &#123;<br>    nums1[k] = nums2[j]<br>    k--<br>    j--<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">mergeArr</span>(<span class="hljs-params">arr1, arr2</span>) &#123;<br>  <span class="hljs-comment">// 初始化两个指针，分别指向 arr1 和 arr2</span><br>  <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>,<br>    j = <span class="hljs-number">0</span><br>  <span class="hljs-comment">// 初始化结果数组</span><br>  <span class="hljs-keyword">const</span> res = []<br>  <span class="hljs-comment">// 缓存arr1的长度</span><br>  <span class="hljs-keyword">const</span> len1 = arr1.<span class="hljs-property">length</span><br>  <span class="hljs-comment">// 缓存arr2的长度</span><br>  <span class="hljs-keyword">const</span> len2 = arr2.<span class="hljs-property">length</span><br>  <span class="hljs-comment">// 合并两个子数组</span><br>  <span class="hljs-keyword">while</span> (i &lt; len1 &amp;&amp; j &lt; len2) &#123;<br>    <span class="hljs-keyword">if</span> (arr1[i] &lt; arr2[j]) &#123;<br>      res.<span class="hljs-title function_">push</span>(arr1[i])<br>      i++<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      res.<span class="hljs-title function_">push</span>(arr2[j])<br>      j++<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 若其中一个子数组首先被合并完全，则直接拼接另一个子数组的剩余部分</span><br>  <span class="hljs-keyword">if</span> (i &lt; len1) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">concat</span>(arr1.<span class="hljs-title function_">slice</span>(i))<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">concat</span>(arr2.<span class="hljs-title function_">slice</span>(j))<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="三数求和"><a href="#三数求和" class="headerlink" title="三数求和"></a>三数求和</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number[][]</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> threeSum = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) &#123;<br>  <span class="hljs-comment">// 用于存放结果数组</span><br>  <span class="hljs-keyword">let</span> res = []<br>  <span class="hljs-comment">// 给 nums 排序</span><br>  nums = nums.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> a - b<br>  &#125;)<br>  <span class="hljs-comment">// 缓存数组长度</span><br>  <span class="hljs-keyword">const</span> len = nums.<span class="hljs-property">length</span><br>  <span class="hljs-comment">// 注意我们遍历到倒数第三个数就足够了，因为左右指针会遍历后面两个数</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">2</span>; i++) &#123;<br>    <span class="hljs-comment">// 左指针 j</span><br>    <span class="hljs-keyword">let</span> j = i + <span class="hljs-number">1</span><br>    <span class="hljs-comment">// 右指针k</span><br>    <span class="hljs-keyword">let</span> k = len - <span class="hljs-number">1</span><br>    <span class="hljs-comment">// 如果遇到重复的数字，则跳过</span><br>    <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] === nums[i - <span class="hljs-number">1</span>]) &#123;<br>      <span class="hljs-keyword">continue</span><br>    &#125;<br>    <span class="hljs-keyword">while</span> (j &lt; k) &#123;<br>      <span class="hljs-comment">// 三数之和小于0，左指针前进</span><br>      <span class="hljs-keyword">if</span> (nums[i] + nums[j] + nums[k] &lt; <span class="hljs-number">0</span>) &#123;<br>        j++<br>        <span class="hljs-comment">// 处理左指针元素重复的情况</span><br>        <span class="hljs-keyword">while</span> (j &lt; k &amp;&amp; nums[j] === nums[j - <span class="hljs-number">1</span>]) &#123;<br>          j++<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[i] + nums[j] + nums[k] &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 三数之和大于0，右指针后退</span><br>        k--<br><br>        <span class="hljs-comment">// 处理右指针元素重复的情况</span><br>        <span class="hljs-keyword">while</span> (j &lt; k &amp;&amp; nums[k] === nums[k + <span class="hljs-number">1</span>]) &#123;<br>          k--<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 得到目标数字组合，推入结果数组</span><br>        res.<span class="hljs-title function_">push</span>([nums[i], nums[j], nums[k]])<br><br>        <span class="hljs-comment">// 左右指针一起前进</span><br>        j++<br>        k--<br><br>        <span class="hljs-comment">// 若左指针元素重复，跳过</span><br>        <span class="hljs-keyword">while</span> (j &lt; k &amp;&amp; nums[j] === nums[j - <span class="hljs-number">1</span>]) &#123;<br>          j++<br>        &#125;<br><br>        <span class="hljs-comment">// 若右指针元素重复，跳过</span><br>        <span class="hljs-keyword">while</span> (j &lt; k &amp;&amp; nums[k] === nums[k + <span class="hljs-number">1</span>]) &#123;<br>          k--<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 返回结果数组</span><br>  <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="比较版本号"><a href="#比较版本号" class="headerlink" title="比较版本号"></a>比较版本号</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> compareVersion = <span class="hljs-keyword">function</span> (<span class="hljs-params">version1, version2</span>) &#123;<br>  <span class="hljs-keyword">const</span> arr1 = version1.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;.&quot;</span>)<br>  <span class="hljs-keyword">const</span> arr2 = version2.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;.&quot;</span>)<br><br>  <span class="hljs-keyword">while</span> (arr1.<span class="hljs-property">length</span> &amp;&amp; arr2.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-keyword">const</span> n1 = <span class="hljs-title class_">Number</span>(arr1.<span class="hljs-title function_">shift</span>())<br>    <span class="hljs-keyword">const</span> n2 = <span class="hljs-title class_">Number</span>(arr2.<span class="hljs-title function_">shift</span>())<br><br>    <span class="hljs-keyword">if</span> (n1 &gt; n2) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> (n1 &lt; n2) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (arr1.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-comment">// arr2 数组已经为空</span><br>    <span class="hljs-keyword">return</span> arr1.<span class="hljs-title function_">every</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> <span class="hljs-title class_">Number</span>(item) === <span class="hljs-number">0</span>) ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span><br>  &#125;<br>  <span class="hljs-comment">//if (temp2.length === 0) &#123;</span><br>  <span class="hljs-comment">//    for (const value of temp1) &#123;</span><br>  <span class="hljs-comment">//    if (Number(value) !== 0) return 1</span><br>  <span class="hljs-comment">//   &#125;</span><br>  <span class="hljs-comment">//&#125;</span><br>  <span class="hljs-keyword">if</span> (arr2.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-comment">// arr1 数组已经为空</span><br>    <span class="hljs-keyword">return</span> arr2.<span class="hljs-title function_">every</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> <span class="hljs-title class_">Number</span>(item) === <span class="hljs-number">0</span>) ? <span class="hljs-number">0</span> : -<span class="hljs-number">1</span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="千位分隔符"><a href="#千位分隔符" class="headerlink" title="千位分隔符"></a><strong>千位分隔符</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> thousandSeparator = <span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) &#123;<br>  <span class="hljs-keyword">let</span> str = n.<span class="hljs-title function_">toString</span>()<br>  <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\d&#123;1,3&#125;(?=(\d&#123;3&#125;)+$)/g</span>, <span class="hljs-function">(<span class="hljs-params">s</span>) =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;s&#125;</span>.`</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> thousandSeparator = <span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) &#123;<br>  <span class="hljs-keyword">let</span> arr = n.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&quot;</span>)<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = arr.<span class="hljs-property">length</span> - <span class="hljs-number">3</span>; i &gt;= <span class="hljs-number">0</span>; i -= <span class="hljs-number">3</span>) &#123;<br>    arr.<span class="hljs-title function_">splice</span>(i, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;.&quot;</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\./</span>, <span class="hljs-string">&quot;&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="拆解-URL-参数中-queryString"><a href="#拆解-URL-参数中-queryString" class="headerlink" title="拆解 URL 参数中 queryString"></a><strong>拆解 URL 参数中 queryString</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">querySearch</span>(<span class="hljs-params">url</span>) &#123;<br>  <span class="hljs-keyword">const</span> query = url.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;?&quot;</span>).<span class="hljs-title function_">pop</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;#&quot;</span>).<span class="hljs-title function_">shift</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&amp;&quot;</span>)<br>  <span class="hljs-keyword">const</span> res = &#123;&#125;<br>  query.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> [key, val] = item.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>)<br>    res[key] = val<br>  &#125;)<br>  <span class="hljs-keyword">return</span> res<br>&#125;<br><span class="hljs-keyword">const</span> url = <span class="hljs-string">&quot;www.alipay.com/index.html?user=anyone&amp;tip=haha#first&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">querySearch</span>(url))<br></code></pre></td></tr></table></figure><h4 id="返回最接近输入值的数字"><a href="#返回最接近输入值的数字" class="headerlink" title="返回最接近输入值的数字"></a><strong>返回最接近输入值的数字</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">findNext</span>(<span class="hljs-params">n, arr</span>) &#123;<br>  <span class="hljs-keyword">const</span> tempArr = [...arr]<br>  tempArr.<span class="hljs-title function_">push</span>(n)<br>  tempArr.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> a - b<br>  &#125;)<br>  <span class="hljs-keyword">let</span> index = tempArr.<span class="hljs-title function_">indexOf</span>(n)<br>  <span class="hljs-keyword">if</span> (index === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> tempArr[index + <span class="hljs-number">1</span>]<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index === tempArr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> tempArr[index - <span class="hljs-number">1</span>]<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> tempArr[index] - tempArr[index - <span class="hljs-number">1</span>] &gt;=<br>    tempArr[index + <span class="hljs-number">1</span>] - tempArr[index]<br>    ? tempArr[index + <span class="hljs-number">1</span>]<br>    : tempArr[index - <span class="hljs-number">1</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="连续子数组的最大和"><a href="#连续子数组的最大和" class="headerlink" title="连续子数组的最大和"></a><strong>连续子数组的最大和</strong></h4><ol><li>贪心算法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> maxSubArray = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) &#123;<br>  <span class="hljs-keyword">let</span> ans = nums[<span class="hljs-number">0</span>]<br>  <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> num <span class="hljs-keyword">of</span> nums) &#123;<br>    <span class="hljs-keyword">if</span> (sum &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// 继续加当前元素</span><br>      sum += num<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 加上当前元素只会对最终数组和起减少的作用，而不是增大数组和，所以就直接以当前元素为起点新起数组求最大数组和</span><br>      sum = num<br>    &#125;<br>    ans = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(ans, sum)<br>  &#125;<br>  <span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>动态规划</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> maxSubArray = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) &#123;<br>  <span class="hljs-keyword">let</span> n = nums.<span class="hljs-property">length</span><br>  <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>  <span class="hljs-keyword">let</span> dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(n).<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-comment">// base case 第一个元素前面没有子数组</span><br>  dp[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>]<br>  <span class="hljs-comment">// 状态转移方程</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>    dp[i] = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(<br>      <span class="hljs-comment">// 自成一派</span><br>      nums[i],<br>      <span class="hljs-comment">// 与前面的子数组合并</span><br>      nums[i] + dp[i - <span class="hljs-number">1</span>]<br>    )<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(...dp)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> maxSubArray = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) &#123;<br>  <span class="hljs-keyword">let</span> n = nums.<span class="hljs-property">length</span><br>  <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>  <span class="hljs-keyword">let</span> cur = nums[<span class="hljs-number">0</span>] <span class="hljs-comment">//保存上一次的最大值</span><br>  <span class="hljs-keyword">let</span> res = cur <span class="hljs-comment">//保存结果</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>    cur = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(nums[i], nums[i] + cur)<br>    res = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(res, cur)<br>  &#125;<br>  <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h4>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 入参是一个数组</span><br><span class="hljs-keyword">const</span> permute = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) &#123;<br>  <span class="hljs-comment">// 缓存数组的长度</span><br>  <span class="hljs-keyword">const</span> len = nums.<span class="hljs-property">length</span><br>  <span class="hljs-comment">// curr 变量用来记录当前的排列内容</span><br>  <span class="hljs-keyword">const</span> curr = []<br>  <span class="hljs-comment">// res 用来记录所有的排列顺序</span><br>  <span class="hljs-keyword">const</span> res = []<br>  <span class="hljs-comment">// visited 用来避免重复使用同一个数字</span><br>  <span class="hljs-keyword">const</span> visited = &#123;&#125;<br>  <span class="hljs-comment">// 定义 dfs 函数，入参是坑位的索引（从 0 计数）</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">nth</span>) &#123;<br>    <span class="hljs-comment">// 若遍历到了不存在的坑位（第 len+1 个），则触碰递归边界返回</span><br>    <span class="hljs-keyword">if</span> (nth === len) &#123;<br>      <span class="hljs-comment">// 此时前 len 个坑位已经填满，将对应的排列记录下来</span><br>      res.<span class="hljs-title function_">push</span>(curr.<span class="hljs-title function_">slice</span>())<br>      <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">// 检查手里剩下的数字有哪些</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>      <span class="hljs-comment">// 若 nums[i] 之前没被其它坑位用过，则可以理解为“这个数字剩下了”</span><br>      <span class="hljs-keyword">if</span> (!visited[nums[i]]) &#123;<br>        <span class="hljs-comment">// 给 nums[i] 打个“已用过”的标</span><br>        visited[nums[i]] = <span class="hljs-number">1</span><br>        <span class="hljs-comment">// 将nums[i]推入当前排列</span><br>        curr.<span class="hljs-title function_">push</span>(nums[i])<br>        <span class="hljs-comment">// 基于这个排列继续往下一个坑走去</span><br>        <span class="hljs-title function_">dfs</span>(nth + <span class="hljs-number">1</span>)<br>        <span class="hljs-comment">// nums[i]让出当前坑位</span><br>        curr.<span class="hljs-title function_">pop</span>()<br>        <span class="hljs-comment">// 下掉“已用过”标识</span><br>        visited[nums[i]] = <span class="hljs-number">0</span><br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 从索引为 0 的坑位（也就是第一个坑位）开始 dfs</span><br>  <span class="hljs-title function_">dfs</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><h4 id="如何用栈实现一个队列？"><a href="#如何用栈实现一个队列？" class="headerlink" title="如何用栈实现一个队列？"></a><strong>如何用栈实现一个队列？</strong></h4><ul><li><p>push(x) – 将一个元素放入队列的尾部。</p></li><li><p>pop() – 从队列首部移除元素。</p></li><li><p>peek() – 返回队列首部的元素。</p></li><li><p>empty() – 返回队列是否为空。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化构造函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyQueue</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 初始化两个栈</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack1</span> = []<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack2</span> = []<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Push element x to the back of queue.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">x</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">void</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title class_">MyQueue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">push</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-comment">// 直接调度数组的 push 方法</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack1</span>.<span class="hljs-title function_">push</span>(x)<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Removes the element from in front of queue and returns that element.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title class_">MyQueue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">pop</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 假如 stack2 为空，需要将 stack1 的元素转移进来</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack2</span>.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 当 stack1 不为空时，出栈</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack1</span>.<span class="hljs-property">length</span> !== <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// 将 stack1 出栈的元素推入 stack2</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack2</span>.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack1</span>.<span class="hljs-title function_">pop</span>())<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 为了达到逆序的目的，我们只从 stack2 里出栈元素</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack2</span>.<span class="hljs-title function_">pop</span>()<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Get the front element.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> * 这个方法和 pop 唯一的区别就是没有将定位到的值出栈</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title class_">MyQueue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">peek</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack2</span>.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 当 stack1 不为空时，出栈</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack1</span>.<span class="hljs-property">length</span> != <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// 将 stack1 出栈的元素推入 stack2</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack2</span>.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack1</span>.<span class="hljs-title function_">pop</span>())<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 缓存 stack2 的长度</span><br>  <span class="hljs-keyword">const</span> stack2Len = <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack2</span>.<span class="hljs-property">length</span><br>  <span class="hljs-keyword">return</span> stack2Len &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack2</span>[stack2Len - <span class="hljs-number">1</span>]<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Returns whether the queue is empty.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title class_">MyQueue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">empty</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 若 stack1 和 stack2 均为空，那么队列空</span><br>  <span class="hljs-keyword">return</span> !<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack1</span>.<span class="hljs-property">length</span> &amp;&amp; !<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack2</span>.<span class="hljs-property">length</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="找出所有滑动窗口里的最大值。"><a href="#找出所有滑动窗口里的最大值。" class="headerlink" title="找出所有滑动窗口里的最大值。"></a>找出所有滑动窗口里的最大值。</h4>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> maxSlidingWindow = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums, k</span>) &#123;<br>  <span class="hljs-comment">// 缓存数组的长度</span><br>  <span class="hljs-keyword">const</span> len = nums.<span class="hljs-property">length</span><br>  <span class="hljs-comment">// 初始化结果数组</span><br>  <span class="hljs-keyword">const</span> res = []<br>  <span class="hljs-comment">// 初始化双端队列</span><br>  <span class="hljs-keyword">const</span> deque = []<br>  <span class="hljs-comment">// 开始遍历数组</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    <span class="hljs-comment">// 当队尾元素小于当前元素时</span><br>    <span class="hljs-keyword">while</span> (deque.<span class="hljs-property">length</span> &amp;&amp; nums[deque[deque.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]] &lt; nums[i]) &#123;<br>      <span class="hljs-comment">// 将队尾元素（索引）不断出队，直至队尾元素大于等于当前元素</span><br>      deque.<span class="hljs-title function_">pop</span>()<br>    &#125;<br>    <span class="hljs-comment">// 入队当前元素索引（注意是索引）</span><br>    deque.<span class="hljs-title function_">push</span>(i)<br>    <span class="hljs-comment">// 当队头元素的索引已经被排除在滑动窗口之外时</span><br>    <span class="hljs-keyword">while</span> (deque.<span class="hljs-property">length</span> &amp;&amp; deque[<span class="hljs-number">0</span>] &lt;= i - k) &#123;<br>      <span class="hljs-comment">// 将队头元素索引出队</span><br>      deque.<span class="hljs-title function_">shift</span>()<br>    &#125;<br>    <span class="hljs-comment">// 判断滑动窗口的状态，只有在被遍历的元素个数大于 k 的时候，才更新结果数组</span><br>    <span class="hljs-keyword">if</span> (i &gt;= k - <span class="hljs-number">1</span>) &#123;<br>      res.<span class="hljs-title function_">push</span>(nums[deque[<span class="hljs-number">0</span>]])<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 返回结果数组</span><br>  <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><h4 id="栈的设计——“最小栈”问题"><a href="#栈的设计——“最小栈”问题" class="headerlink" title="栈的设计——“最小栈”问题"></a><strong>栈的设计——“最小栈”问题</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">MinStack</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span> = []<br>  <span class="hljs-comment">// 定义辅助栈</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack2</span> = []<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">x</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">void</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title class_">MinStack</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">push</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">push</span>(x)<br>  <span class="hljs-comment">// 若入栈的值小于当前最小值，则推入辅助栈栈顶</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack2</span>.<span class="hljs-property">length</span> == <span class="hljs-number">0</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack2</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack2</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] &gt;= x) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack2</span>.<span class="hljs-title function_">push</span>(x)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">void</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title class_">MinStack</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">pop</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 若出栈的值和当前最小值相等，那么辅助栈也要对栈顶元素进行出栈，确保最小值的有效性</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-title function_">pop</span>() == <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack2</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack2</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack2</span>.<span class="hljs-title function_">pop</span>()<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title class_">MinStack</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">top</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title class_">MinStack</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getMin</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 辅助栈的栈顶，存的就是目标中的最小值</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">stack2</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">stack2</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="有效括号"><a href="#有效括号" class="headerlink" title="有效括号"></a>有效括号</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isValid = <span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>    [<span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;)&quot;</span>],<br>    [<span class="hljs-string">&quot;[&quot;</span>, <span class="hljs-string">&quot;]&quot;</span>],<br>    [<span class="hljs-string">&quot;&#123;&quot;</span>, <span class="hljs-string">&quot;&#125;&quot;</span>],<br>  ])<br>  <span class="hljs-keyword">var</span> arr = []<br>  <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> ch <span class="hljs-keyword">of</span> s) &#123;<br>    <span class="hljs-keyword">switch</span> (ch) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;(&quot;</span>:<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;[&quot;</span>:<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;&#123;&quot;</span>:<br>        arr.<span class="hljs-title function_">push</span>(ch)<br>        i++<br>        <span class="hljs-keyword">break</span><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;)&quot;</span>:<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;]&quot;</span>:<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;&#125;&quot;</span>:<br>        <span class="hljs-comment">// arr.push()</span><br>        <span class="hljs-keyword">if</span> (ch == map.<span class="hljs-title function_">get</span>(arr[i - <span class="hljs-number">1</span>])) &#123;<br>          arr.<span class="hljs-title function_">pop</span>()<br>          i--<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-property">length</span> === <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><h4 id="链表的合并"><a href="#链表的合并" class="headerlink" title="链表的合并"></a><strong>链表的合并</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mergeTwoLists = <span class="hljs-keyword">function</span> (<span class="hljs-params">l1, l2</span>) &#123;<br>  <span class="hljs-comment">// 定义头结点，确保链表可以被访问到</span><br>  <span class="hljs-keyword">let</span> head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>()<br>  <span class="hljs-comment">// cur 这里就是咱们那根“针”</span><br>  <span class="hljs-keyword">let</span> cur = head<br>  <span class="hljs-comment">// “针”开始在 l1 和 l2 间穿梭了</span><br>  <span class="hljs-keyword">while</span> (l1 &amp;&amp; l2) &#123;<br>    <span class="hljs-comment">// 如果 l1 的结点值较小</span><br>    <span class="hljs-keyword">if</span> (l1.<span class="hljs-property">val</span> &lt;= l2.<span class="hljs-property">val</span>) &#123;<br>      <span class="hljs-comment">// 先串起 l1 的结点</span><br>      cur.<span class="hljs-property">next</span> = l1<br>      <span class="hljs-comment">// l1 指针向前一步</span><br>      l1 = l1.<span class="hljs-property">next</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// l2 较小时，串起 l2 结点</span><br>      cur.<span class="hljs-property">next</span> = l2<br>      <span class="hljs-comment">// l2 向前一步</span><br>      l2 = l2.<span class="hljs-property">next</span><br>    &#125;<br><br>    <span class="hljs-comment">// “针”在串起一个结点后，也会往前一步</span><br>    cur = cur.<span class="hljs-property">next</span><br>  &#125;<br><br>  <span class="hljs-comment">// 处理链表不等长的情况</span><br>  cur.<span class="hljs-property">next</span> = l1 !== <span class="hljs-literal">null</span> ? l1 : l2<br>  <span class="hljs-comment">// 返回起始结点</span><br>  <span class="hljs-keyword">return</span> head.<span class="hljs-property">next</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="链表结点的删除"><a href="#链表结点的删除" class="headerlink" title="链表结点的删除"></a><strong>链表结点的删除</strong></h4><p>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> deleteDuplicates = <span class="hljs-keyword">function</span> (<span class="hljs-params">head</span>) &#123;<br>  <span class="hljs-comment">// 设定 cur 指针，初始位置为链表第一个结点</span><br>  <span class="hljs-keyword">let</span> cur = head<br>  <span class="hljs-comment">// 遍历链表</span><br>  <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span> &amp;&amp; cur.<span class="hljs-property">next</span> != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 若当前结点和它后面一个结点值相等（重复）</span><br>    <span class="hljs-keyword">if</span> (cur.<span class="hljs-property">val</span> === cur.<span class="hljs-property">next</span>.<span class="hljs-property">val</span>) &#123;<br>      <span class="hljs-comment">// 删除靠后的那个结点（去重）</span><br>      cur.<span class="hljs-property">next</span> = cur.<span class="hljs-property">next</span>.<span class="hljs-property">next</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 若不重复，继续遍历</span><br>      cur = cur.<span class="hljs-property">next</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> head<br>&#125;<br></code></pre></td></tr></table></figure><p>给定一个排序链表，删除所有含有重复数字的结点，只保留原始链表中 没有重复出现的数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> deleteDuplicates = <span class="hljs-keyword">function</span> (<span class="hljs-params">head</span>) &#123;<br>  <span class="hljs-comment">// 极端情况：0个或1个结点，则不会重复，直接返回</span><br>  <span class="hljs-keyword">if</span> (!head || !head.<span class="hljs-property">next</span>) &#123;<br>    <span class="hljs-keyword">return</span> head<br>  &#125;<br>  <span class="hljs-comment">// dummy 登场</span><br>  <span class="hljs-keyword">let</span> dummy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>()<br>  <span class="hljs-comment">// dummy 永远指向头结点</span><br>  dummy.<span class="hljs-property">next</span> = head<br>  <span class="hljs-comment">// cur 从 dummy 开始遍历</span><br>  <span class="hljs-keyword">let</span> cur = dummy<br>  <span class="hljs-comment">// 当 cur 的后面有至少两个结点时</span><br>  <span class="hljs-keyword">while</span> (cur.<span class="hljs-property">next</span> &amp;&amp; cur.<span class="hljs-property">next</span>.<span class="hljs-property">next</span>) &#123;<br>    <span class="hljs-comment">// 对 cur 后面的两个结点进行比较</span><br>    <span class="hljs-keyword">if</span> (cur.<span class="hljs-property">next</span>.<span class="hljs-property">val</span> === cur.<span class="hljs-property">next</span>.<span class="hljs-property">next</span>.<span class="hljs-property">val</span>) &#123;<br>      <span class="hljs-comment">// 若值重复，则记下这个值</span><br>      <span class="hljs-keyword">let</span> val = cur.<span class="hljs-property">next</span>.<span class="hljs-property">val</span><br>      <span class="hljs-comment">// 反复地排查后面的元素是否存在多次重复该值的情况</span><br>      <span class="hljs-keyword">while</span> (cur.<span class="hljs-property">next</span> &amp;&amp; cur.<span class="hljs-property">next</span>.<span class="hljs-property">val</span> === val) &#123;<br>        <span class="hljs-comment">// 若有，则删除</span><br>        cur.<span class="hljs-property">next</span> = cur.<span class="hljs-property">next</span>.<span class="hljs-property">next</span><br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 若不重复，则正常遍历</span><br>      cur = cur.<span class="hljs-property">next</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 返回链表的起始结点</span><br>  <span class="hljs-keyword">return</span> dummy.<span class="hljs-property">next</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="删除链表的倒数第-N-个结点"><a href="#删除链表的倒数第-N-个结点" class="headerlink" title="删除链表的倒数第 N 个结点"></a><strong>删除链表的倒数第 N 个结点</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> removeNthFromEnd = <span class="hljs-keyword">function</span> (<span class="hljs-params">head, n</span>) &#123;<br>  <span class="hljs-comment">// 初始化 dummy 结点</span><br><br>  <span class="hljs-keyword">const</span> dummy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>()<br>  <span class="hljs-comment">// dummy指向头结点</span><br>  dummy.<span class="hljs-property">next</span> = head<br>  <span class="hljs-comment">// 初始化快慢指针，均指向dummy</span><br>  <span class="hljs-keyword">let</span> fast = dummy<br>  <span class="hljs-keyword">let</span> slow = dummy<br><br>  <span class="hljs-comment">// 快指针闷头走 n 步</span><br>  <span class="hljs-keyword">while</span> (n !== <span class="hljs-number">0</span>) &#123;<br>    fast = fast.<span class="hljs-property">next</span><br>    n--<br>  &#125;<br><br>  <span class="hljs-comment">// 快慢指针一起走</span><br>  <span class="hljs-keyword">while</span> (fast.<span class="hljs-property">next</span>) &#123;<br>    fast = fast.<span class="hljs-property">next</span><br>    slow = slow.<span class="hljs-property">next</span><br>  &#125;<br><br>  <span class="hljs-comment">// 慢指针删除自己的后继结点</span><br>  slow.<span class="hljs-property">next</span> = slow.<span class="hljs-property">next</span>.<span class="hljs-property">next</span><br>  <span class="hljs-comment">// 返回头结点</span><br>  <span class="hljs-keyword">return</span> dummy.<span class="hljs-property">next</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="链表的反转"><a href="#链表的反转" class="headerlink" title="链表的反转"></a><strong>链表的反转</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reverseList = <span class="hljs-keyword">function</span> (<span class="hljs-params">head</span>) &#123;<br>  <span class="hljs-comment">// 初始化前驱结点为 null</span><br>  <span class="hljs-keyword">let</span> pre = <span class="hljs-literal">null</span><br>  <span class="hljs-comment">// 初始化目标结点为头结点</span><br>  <span class="hljs-keyword">let</span> cur = head<br>  <span class="hljs-comment">// 只要目标结点不为 null，遍历就得继续</span><br>  <span class="hljs-keyword">while</span> (cur !== <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 记录一下 next 结点</span><br>    <span class="hljs-keyword">let</span> next = cur.<span class="hljs-property">next</span><br>    <span class="hljs-comment">// 反转指针</span><br>    cur.<span class="hljs-property">next</span> = pre<br>    <span class="hljs-comment">// pre 往前走一步</span><br>    pre = cur<br>    <span class="hljs-comment">// cur往前走一步</span><br>    cur = next<br>  &#125;<br>  <span class="hljs-comment">// 反转结束后，pre 就会变成新链表的头结点</span><br>  <span class="hljs-keyword">return</span> pre<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="局部反转一个链表"><a href="#局部反转一个链表" class="headerlink" title="局部反转一个链表"></a>局部反转一个链表</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reverseBetween = <span class="hljs-keyword">function</span> (<span class="hljs-params">head, m, n</span>) &#123;<br>  <span class="hljs-comment">// 定义pre、cur，用leftHead来承接整个区间的前驱结点</span><br>  <span class="hljs-keyword">let</span> pre, cur, leftHead<br>  <span class="hljs-comment">// 别忘了用 dummy 嗷</span><br>  <span class="hljs-keyword">const</span> dummy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>()<br>  <span class="hljs-comment">// dummy后继结点是头结点</span><br>  dummy.<span class="hljs-property">next</span> = head<br>  <span class="hljs-comment">// p是一个游标，用于遍历，最初指向 dummy</span><br>  <span class="hljs-keyword">let</span> p = dummy<br>  <span class="hljs-comment">// p往前走 m-1 步，走到整个区间的前驱结点处</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; m - <span class="hljs-number">1</span>; i++) &#123;<br>    p = p.<span class="hljs-property">next</span><br>  &#125;<br>  <span class="hljs-comment">// 缓存这个前驱结点到 leftHead 里</span><br>  leftHead = p<br>  <span class="hljs-comment">// start 是反转区间的第一个结点</span><br>  <span class="hljs-keyword">let</span> start = leftHead.<span class="hljs-property">next</span><br>  <span class="hljs-comment">// pre 指向start</span><br>  pre = start<br>  <span class="hljs-comment">// cur 指向 start 的下一个结点</span><br>  cur = pre.<span class="hljs-property">next</span><br>  <span class="hljs-comment">// 开始重复反转动作</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = m; i &lt; n; i++) &#123;<br>    <span class="hljs-keyword">let</span> next = cur.<span class="hljs-property">next</span><br>    cur.<span class="hljs-property">next</span> = pre<br>    pre = cur<br>    cur = next<br>  &#125;<br>  <span class="hljs-comment">//  leftHead 的后继结点此时为反转后的区间的第一个结点</span><br>  leftHead.<span class="hljs-property">next</span> = pre<br>  <span class="hljs-comment">// 将区间内反转后的最后一个结点 next 指向 cur</span><br>  start.<span class="hljs-property">next</span> = cur<br>  <span class="hljs-comment">// dummy.next 永远指向链表头结点</span><br>  <span class="hljs-keyword">return</span> dummy.<span class="hljs-property">next</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="判断链表是否成环"><a href="#判断链表是否成环" class="headerlink" title="判断链表是否成环"></a><strong>判断链表是否成环</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> hasCycle = <span class="hljs-keyword">function</span> (<span class="hljs-params">head</span>) &#123;<br>  <span class="hljs-comment">// 只要结点存在，那么就继续遍历</span><br>  <span class="hljs-keyword">while</span> (head) &#123;<br>    <span class="hljs-comment">// 如果 flag 已经立过了，那么说明环存在</span><br>    <span class="hljs-keyword">if</span> (head.<span class="hljs-property">flag</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 如果 flag 没立过，就立一个 flag 再往 下走</span><br>      head.<span class="hljs-property">flag</span> = <span class="hljs-literal">true</span><br>      head = head.<span class="hljs-property">next</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="定位环的起点"><a href="#定位环的起点" class="headerlink" title="定位环的起点"></a><strong>定位环的起点</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> detectCycle = <span class="hljs-keyword">function</span> (<span class="hljs-params">head</span>) &#123;<br>  <span class="hljs-keyword">while</span> (head) &#123;<br>    <span class="hljs-keyword">if</span> (head.<span class="hljs-property">flag</span>) &#123;<br>      <span class="hljs-keyword">return</span> head<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      head.<span class="hljs-property">flag</span> = <span class="hljs-literal">true</span><br>      head = head.<span class="hljs-property">next</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h4><ol><li>哈希表</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> getIntersectionNode = <span class="hljs-keyword">function</span> (<span class="hljs-params">headA, headB</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!headA || !headB) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>  <span class="hljs-keyword">const</span> hashmap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br><br>  <span class="hljs-keyword">let</span> pA = headA<br>  <span class="hljs-keyword">while</span> (pA) &#123;<br>    hashmap.<span class="hljs-title function_">set</span>(pA, <span class="hljs-number">1</span>)<br>    pA = pA.<span class="hljs-property">next</span><br>  &#125;<br><br>  <span class="hljs-keyword">let</span> pB = headB<br>  <span class="hljs-keyword">while</span> (pB) &#123;<br>    <span class="hljs-keyword">if</span> (hashmap.<span class="hljs-title function_">has</span>(pB)) <span class="hljs-keyword">return</span> pB<br>    pB = pB.<span class="hljs-property">next</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>双指针</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> getIntersectionNode = <span class="hljs-keyword">function</span> (<span class="hljs-params">headA, headB</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!headA || !headB) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br><br>  <span class="hljs-keyword">let</span> pA = headA,<br>    pB = headB<br>  <span class="hljs-keyword">while</span> (pA !== pB) &#123;<br>    pA = pA === <span class="hljs-literal">null</span> ? headB : pA.<span class="hljs-property">next</span><br>    pB = pB === <span class="hljs-literal">null</span> ? headA : pB.<span class="hljs-property">next</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> pA<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><h4 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> preorderTraversal = <span class="hljs-keyword">function</span> (<span class="hljs-params">root</span>) &#123;<br>  <span class="hljs-comment">// 首先声明一个数组用来存放遍历得到的节点val值</span><br>  <span class="hljs-keyword">const</span> result = []<br>  <span class="hljs-comment">// 采用递归遍历</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">preorder</span>(<span class="hljs-params">node</span>) &#123;<br>    <span class="hljs-comment">// 如果节点为空直接返回</span><br>    <span class="hljs-keyword">if</span> (!node) <span class="hljs-keyword">return</span><br>    <span class="hljs-comment">// 先序遍历就是把当前节点输出 放在左右递归调用之前 将其数值放入结果数组</span><br>    result.<span class="hljs-title function_">push</span>(node.<span class="hljs-property">val</span>)<br>    <span class="hljs-comment">// 然后递归遍历左孩子</span><br>    <span class="hljs-title function_">preorder</span>(node.<span class="hljs-property">left</span>)<br>    <span class="hljs-comment">// 最后递归遍历右孩子</span><br>    <span class="hljs-title function_">preorder</span>(node.<span class="hljs-property">right</span>)<br>  &#125;<br>  <span class="hljs-title function_">preorder</span>(root)<br>  <span class="hljs-comment">// 返回结果</span><br>  <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="迭代遍历（利用栈思想）"><a href="#迭代遍历（利用栈思想）" class="headerlink" title="迭代遍历（利用栈思想）"></a>迭代遍历（利用栈思想）</h4><ol><li><p>前序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">TreeNode</span>&#125; <span class="hljs-variable">root</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number[]</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> preorderTraversal = <span class="hljs-keyword">function</span> (<span class="hljs-params">root</span>) &#123;<br>  <span class="hljs-comment">// 定义结果数组</span><br>  <span class="hljs-keyword">const</span> res = []<br>  <span class="hljs-comment">// 处理边界条件</span><br>  <span class="hljs-keyword">if</span> (!root) &#123;<br>    <span class="hljs-keyword">return</span> res<br>  &#125;<br>  <span class="hljs-comment">// 初始化栈结构</span><br>  <span class="hljs-keyword">const</span> stack = []<br>  <span class="hljs-comment">// 首先将根结点入栈</span><br>  stack.<span class="hljs-title function_">push</span>(root)<br>  <span class="hljs-comment">// 若栈不为空，则重复出栈、入栈操作</span><br>  <span class="hljs-keyword">while</span> (stack.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-comment">// 将栈顶结点记为当前结点</span><br>    <span class="hljs-keyword">const</span> cur = stack.<span class="hljs-title function_">pop</span>()<br>    <span class="hljs-comment">// 当前结点就是当前子树的根结点，把这个结点放在结果数组的尾部</span><br>    res.<span class="hljs-title function_">push</span>(cur.<span class="hljs-property">val</span>)<br>    <span class="hljs-comment">// 若当前子树根结点有右孩子，则将右孩子入栈</span><br>    <span class="hljs-keyword">if</span> (cur.<span class="hljs-property">right</span>) &#123;<br>      stack.<span class="hljs-title function_">push</span>(cur.<span class="hljs-property">right</span>)<br>    &#125;<br>    <span class="hljs-comment">// 若当前子树根结点有左孩子，则将左孩子入栈</span><br>    <span class="hljs-keyword">if</span> (cur.<span class="hljs-property">left</span>) &#123;<br>      stack.<span class="hljs-title function_">push</span>(cur.<span class="hljs-property">left</span>)<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 返回结果数组</span><br>  <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>后序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">TreeNode</span>&#125; <span class="hljs-variable">root</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number[]</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> postorderTraversal = <span class="hljs-keyword">function</span> (<span class="hljs-params">root</span>) &#123;<br>  <span class="hljs-comment">// 定义结果数组</span><br>  <span class="hljs-keyword">const</span> res = []<br>  <span class="hljs-comment">// 处理边界条件</span><br>  <span class="hljs-keyword">if</span> (!root) &#123;<br>    <span class="hljs-keyword">return</span> res<br>  &#125;<br>  <span class="hljs-comment">// 初始化栈结构</span><br>  <span class="hljs-keyword">const</span> stack = []<br>  <span class="hljs-comment">// 首先将根结点入栈</span><br>  stack.<span class="hljs-title function_">push</span>(root)<br>  <span class="hljs-comment">// 若栈不为空，则重复出栈、入栈操作</span><br>  <span class="hljs-keyword">while</span> (stack.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-comment">// 将栈顶结点记为当前结点</span><br>    <span class="hljs-keyword">const</span> cur = stack.<span class="hljs-title function_">pop</span>()<br>    <span class="hljs-comment">// 当前结点就是当前子树的根结点，把这个结点放在结果数组的头部</span><br>    res.<span class="hljs-title function_">unshift</span>(cur.<span class="hljs-property">val</span>)<br>    <span class="hljs-comment">// 若当前子树根结点有左孩子，则将左孩子入栈</span><br>    <span class="hljs-keyword">if</span> (cur.<span class="hljs-property">left</span>) &#123;<br>      stack.<span class="hljs-title function_">push</span>(cur.<span class="hljs-property">left</span>)<br>    &#125;<br>    <span class="hljs-comment">// 若当前子树根结点有右孩子，则将右孩子入栈</span><br>    <span class="hljs-keyword">if</span> (cur.<span class="hljs-property">right</span>) &#123;<br>      stack.<span class="hljs-title function_">push</span>(cur.<span class="hljs-property">right</span>)<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 返回结果数组</span><br>  <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>中序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> inorderTraversal = <span class="hljs-keyword">function</span> (<span class="hljs-params">root</span>) &#123;<br>  <span class="hljs-comment">// 定义结果数组</span><br>  <span class="hljs-keyword">const</span> res = []<br>  <span class="hljs-comment">// 初始化栈结构</span><br>  <span class="hljs-keyword">const</span> stack = []<br>  <span class="hljs-comment">// 用一个 cur 结点充当游标</span><br>  <span class="hljs-keyword">let</span> cur = root<br>  <span class="hljs-comment">// 当 cur 不为空、或者 stack 不为空时，重复以下逻辑</span><br>  <span class="hljs-keyword">while</span> (cur || stack.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-comment">// 这个 while 的作用是把寻找最左叶子结点的过程中，途径的所有结点都记录下来</span><br>    <span class="hljs-keyword">while</span> (cur) &#123;<br>      <span class="hljs-comment">// 将途径的结点入栈</span><br>      stack.<span class="hljs-title function_">push</span>(cur)<br>      <span class="hljs-comment">// 继续搜索当前结点的左孩子</span><br>      cur = cur.<span class="hljs-property">left</span><br>    &#125;<br>    <span class="hljs-comment">// 取出栈顶元素</span><br>    cur = stack.<span class="hljs-title function_">pop</span>()<br>    <span class="hljs-comment">// 将栈顶元素入栈</span><br>    res.<span class="hljs-title function_">push</span>(cur.<span class="hljs-property">val</span>)<br>    <span class="hljs-comment">// 尝试读取 cur 结点的右孩子</span><br>    cur = cur.<span class="hljs-property">right</span><br>  &#125;<br>  <span class="hljs-comment">// 返回结果数组</span><br>  <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h4><ol><li>返回数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">BFS</span>(<span class="hljs-params">root</span>) &#123;<br>  <span class="hljs-keyword">const</span> res = []<br>  <span class="hljs-keyword">const</span> queue = [] <span class="hljs-comment">// 初始化队列queue</span><br>  <span class="hljs-comment">// 根结点首先入队</span><br>  queue.<span class="hljs-title function_">push</span>(root)<br>  <span class="hljs-comment">// 队列不为空，说明没有遍历完全</span><br>  <span class="hljs-keyword">while</span> (queue.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-keyword">const</span> top = queue[<span class="hljs-number">0</span>] <span class="hljs-comment">// 取出队头元素</span><br>    <span class="hljs-comment">// 访问 top</span><br>    res.<span class="hljs-title function_">push</span>(top.<span class="hljs-property">val</span>)<br>    <span class="hljs-comment">// 如果左子树存在，左子树入队</span><br>    <span class="hljs-keyword">if</span> (top.<span class="hljs-property">left</span>) &#123;<br>      queue.<span class="hljs-title function_">push</span>(top.<span class="hljs-property">left</span>)<br>    &#125;<br>    <span class="hljs-comment">// 如果右子树存在，右子树入队</span><br>    <span class="hljs-keyword">if</span> (top.<span class="hljs-property">right</span>) &#123;<br>      queue.<span class="hljs-title function_">push</span>(top.<span class="hljs-property">right</span>)<br>    &#125;<br>    queue.<span class="hljs-title function_">shift</span>() <span class="hljs-comment">// 访问完毕，队头元素出队</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>返回二维数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> levelOrder = <span class="hljs-keyword">function</span> (<span class="hljs-params">root</span>) &#123;<br>  <span class="hljs-comment">/* 非递归的实现方式 */</span><br>  <span class="hljs-keyword">let</span> res = []<br>  <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> res<br>  <span class="hljs-keyword">let</span> queue = [root]<br>  <span class="hljs-comment">// while 循环控制从上向下一层层遍历</span><br>  <span class="hljs-keyword">while</span> (queue.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-keyword">let</span> size = queue.<span class="hljs-property">length</span><br>    <span class="hljs-comment">// 记录这一层的节点值</span><br>    <span class="hljs-keyword">let</span> level = []<br>    <span class="hljs-comment">// for 循环控制每一层从左向右遍历</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>      <span class="hljs-keyword">let</span> cur = queue.<span class="hljs-title function_">shift</span>()<br>      level.<span class="hljs-title function_">push</span>(cur.<span class="hljs-property">val</span>)<br>      <span class="hljs-keyword">if</span> (cur.<span class="hljs-property">left</span> != <span class="hljs-literal">null</span>) queue.<span class="hljs-title function_">push</span>(cur.<span class="hljs-property">left</span>)<br>      <span class="hljs-keyword">if</span> (cur.<span class="hljs-property">right</span> != <span class="hljs-literal">null</span>) queue.<span class="hljs-title function_">push</span>(cur.<span class="hljs-property">right</span>)<br>    &#125;<br>    res.<span class="hljs-title function_">push</span>(level)<br>  &#125;<br>  <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><h4 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a><strong>爬楼梯</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> climbStairs = <span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-comment">// 处理递归边界</span><br>    <span class="hljs-keyword">if</span>(n === <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(n === <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>    &#125;<br>    <span class="hljs-comment">// 递归计算</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">climbStairs</span>(n-<span class="hljs-number">1</span>) + <span class="hljs-title function_">climbStairs</span>(n-<span class="hljs-number">2</span>)<br>&#125;;<br>--------------------<br><span class="hljs-comment">// 定义记忆数组 f</span><br><span class="hljs-keyword">const</span> f = []<br><span class="hljs-keyword">const</span> climbStairs = <span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>) &#123;<br>  <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  &#125;<br>  <span class="hljs-keyword">if</span>(n==<span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>  &#125;<br>  <span class="hljs-comment">// 若f[n]不存在，则进行计算</span><br>  <span class="hljs-keyword">if</span>(f[n]===<span class="hljs-literal">undefined</span>)  f[n] = <span class="hljs-title function_">climbStairs</span>(n-<span class="hljs-number">1</span>) + <span class="hljs-title function_">climbStairs</span>(n-<span class="hljs-number">2</span>)<br>  <span class="hljs-comment">// 若f[n]已经求解过，直接返回</span><br>  <span class="hljs-keyword">return</span> f[n]<br>&#125;;<br><br><br>-------------<br>  <span class="hljs-keyword">const</span> climbStairs = <span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-comment">// 初始化状态数组</span><br>    <span class="hljs-keyword">const</span> f = [];<br>    <span class="hljs-comment">// 初始化已知值</span><br>    f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    f[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">// 动态更新每一层楼梯对应的结果</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">3</span>;i &lt;= n;i++)&#123;<br>        f[i] = f[i-<span class="hljs-number">2</span>] + f[i-<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-comment">// 返回目标值</span><br>    <span class="hljs-keyword">return</span> f[n];<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="如何优雅地找硬币"><a href="#如何优雅地找硬币" class="headerlink" title="如何优雅地找硬币"></a><strong>如何优雅地找硬币</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> coinChange = <span class="hljs-keyword">function</span> (<span class="hljs-params">coins, amount</span>) &#123;<br>  <span class="hljs-comment">// 用于保存每个目标总额对应的最小硬币个数</span><br>  <span class="hljs-keyword">const</span> f = []<br>  <span class="hljs-comment">// 提前定义已知情况</span><br>  f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>  <span class="hljs-comment">// 遍历 [1, amount] 这个区间的硬币总额</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= amount; i++) &#123;<br>    <span class="hljs-comment">// 求的是最小值，因此我们预设为无穷大，确保它一定会被更小的数更新</span><br>    f[i] = <span class="hljs-title class_">Infinity</span><br>    <span class="hljs-comment">// 循环遍历每个可用硬币的面额</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; coins.<span class="hljs-property">length</span>; j++) &#123;<br>      <span class="hljs-comment">// 若硬币面额小于目标总额，则问题成立</span><br>      <span class="hljs-keyword">if</span> (i - coins[j] &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 状态转移方程</span><br>        f[i] = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(f[i], f[i - coins[j]] + <span class="hljs-number">1</span>)<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 若目标总额对应的解为无穷大，则意味着没有一个符合条件的硬币总数来更新它，本题无解，返回-1</span><br>  <span class="hljs-keyword">if</span> (f[amount] === <span class="hljs-title class_">Infinity</span>) &#123;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>  &#125;<br>  <span class="hljs-comment">// 若有解，直接返回解的内容</span><br>  <span class="hljs-keyword">return</span> f[amount]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="背包模型"><a href="#背包模型" class="headerlink" title="背包模型"></a>背包模型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">knapsack</span>(<span class="hljs-params">n, c, w, value</span>) &#123;<br>  <span class="hljs-comment">// dp是动态规划的状态保存数组</span><br>  <span class="hljs-keyword">const</span> dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(c + <span class="hljs-number">1</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-comment">// res 用来记录所有组合方案中的最大值</span><br>  <span class="hljs-keyword">let</span> res = -<span class="hljs-title class_">Infinity</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v = c; v &gt;= w[i]; v--) &#123;<br>      <span class="hljs-comment">// 写出状态转移方程</span><br>      dp[v] = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(dp[v], dp[v - w[i]] + value[i])<br>      <span class="hljs-comment">// 即时更新最大值</span><br>      <span class="hljs-keyword">if</span> (dp[v] &gt; res) &#123;<br>        res = dp[v]<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="最长上升子序列模型-1"><a href="#最长上升子序列模型-1" class="headerlink" title="最长上升子序列模型"></a><strong>最长上升子序列模型</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 入参是一个数字序列</span><br><span class="hljs-keyword">const</span> lengthOfLIS = <span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) &#123;<br>  <span class="hljs-comment">// 缓存序列的长度</span><br>  <span class="hljs-keyword">const</span> len = nums.<span class="hljs-property">length</span><br>  <span class="hljs-comment">// 处理边界条件</span><br>  <span class="hljs-keyword">if</span> (!len) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>  &#125;<br>  <span class="hljs-comment">// 初始化数组里面每一个索引位的状态值</span><br>  <span class="hljs-keyword">const</span> dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(len).<span class="hljs-title function_">fill</span>(<span class="hljs-number">1</span>)<br>  <span class="hljs-comment">// 初始化最大上升子序列的长度为1</span><br>  <span class="hljs-keyword">let</span> maxLen = <span class="hljs-number">1</span><br>  <span class="hljs-comment">// 从第2个元素开始，遍历整个数组</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; len; i++) &#123;<br>    <span class="hljs-comment">// 每遍历一个新元素，都要“回头看”，看看能不能延长原有的上升子序列</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>      <span class="hljs-comment">// 若遇到了一个比当前元素小的值，则意味着遇到了一个可以延长的上升子序列，故更新当前元素索引位对应的状态</span><br>      <span class="hljs-keyword">if</span> (nums[j] &lt; nums[i]) &#123;<br>        dp[i] = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(dp[i], dp[j] + <span class="hljs-number">1</span>)<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 及时更新上升子序列长度的最大值</span><br>    <span class="hljs-keyword">if</span> (dp[i] &gt; maxLen) &#123;<br>      maxLen = dp[i]<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 遍历完毕，最后到手的就是最大上升子序列的长度</span><br>  <span class="hljs-keyword">return</span> maxLen<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="实现-add-1-2"><a href="#实现-add-1-2" class="headerlink" title="实现 add(1)(2)()"></a>实现 add(1)(2)()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">b</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!b) <span class="hljs-keyword">return</span> a<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">add</span>(a + b)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>![image-20220330143049151](&#x2F;Users&#x2F;didi&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220330143049151.png)</p>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
